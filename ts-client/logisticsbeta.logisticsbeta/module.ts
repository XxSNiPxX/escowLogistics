// Generated by Ignite ignite.com/cli

import { SigningStargateClient, DeliverTxResponse, StdFee } from "@cosmjs/stargate";
import { EncodeObject, GeneratedType, OfflineSigner, Registry } from "@cosmjs/proto-signing";
import { msgTypes } from './registry';
import { IgniteClient } from "../client"
import { MissingWalletError } from "../helpers"
import { Api } from "./rest";
import { MsgCreateTransporterTradeRejectedResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { MsgCreateVendorTradeReject } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryParamsResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryAllVendorRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryAllVendorResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { Vendor } from "./types/logisticsbeta/logisticsbeta/vendor";
import { MsgCreateTransporter } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryGetVendorResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetTransporterResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetTradeResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreatePurchaserResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { MsgUpdateParamsResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { MsgCreateVendorTradeAcceptResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryGetPurchaserRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryAllPurchaserRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetSystemInfo4Response } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetSystemInfo1Response } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateTrade } from "./types/logisticsbeta/logisticsbeta/tx";
import { MsgCreatePurchaser } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryGetSystemInfo4Request } from "./types/logisticsbeta/logisticsbeta/query";
import { SystemInfo3 } from "./types/logisticsbeta/logisticsbeta/system_info_3";
import { QueryAllTradeRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateTransporterVendorReached } from "./types/logisticsbeta/logisticsbeta/tx";
import { SystemInfo1 } from "./types/logisticsbeta/logisticsbeta/system_info_1";
import { Trade } from "./types/logisticsbeta/logisticsbeta/trade";
import { MsgCreateTransporterTradeRejected } from "./types/logisticsbeta/logisticsbeta/tx";
import { Params } from "./types/logisticsbeta/logisticsbeta/params";
import { Transporter } from "./types/logisticsbeta/logisticsbeta/transporter";
import { QueryGetSystemInfo2Response } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgUpdateParams } from "./types/logisticsbeta/logisticsbeta/tx";
import { Purchaser } from "./types/logisticsbeta/logisticsbeta/purchaser";
import { QueryGetSystemInfo1Request } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetPurchaserResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { GenesisState } from "./types/logisticsbeta/logisticsbeta/genesis";
import { QueryAllTransporterResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateVendorResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryGetTradeRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryAllTradeResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateVendorTradeRejectResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { SystemInfo2 } from "./types/logisticsbeta/logisticsbeta/system_info_2";
import { MsgCreateTransporterTradeAccepted } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryParamsRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetSystemInfo3Response } from "./types/logisticsbeta/logisticsbeta/query";
import { SystemInfo4 } from "./types/logisticsbeta/logisticsbeta/system_info_4";
import { MsgCreateVendor } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryGetSystemInfo2Request } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetSystemInfo3Request } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateVendorTradeAccept } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryGetVendorRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryGetTransporterRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateTradeResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { MsgCreateTransporterTradeAcceptedResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { QueryAllPurchaserResponse } from "./types/logisticsbeta/logisticsbeta/query";
import { QueryAllTransporterRequest } from "./types/logisticsbeta/logisticsbeta/query";
import { MsgCreateTransporterResponse } from "./types/logisticsbeta/logisticsbeta/tx";
import { MsgCreateTransporterVendorReachedResponse } from "./types/logisticsbeta/logisticsbeta/tx";


export { MsgCreateTransporterTradeRejectedResponse, MsgCreateVendorTradeReject, QueryParamsResponse, QueryAllVendorRequest, QueryAllVendorResponse, Vendor, MsgCreateTransporter, QueryGetVendorResponse, QueryGetTransporterResponse, QueryGetTradeResponse, MsgCreatePurchaserResponse, MsgUpdateParamsResponse, MsgCreateVendorTradeAcceptResponse, QueryGetPurchaserRequest, QueryAllPurchaserRequest, QueryGetSystemInfo4Response, QueryGetSystemInfo1Response, MsgCreateTrade, MsgCreatePurchaser, QueryGetSystemInfo4Request, SystemInfo3, QueryAllTradeRequest, MsgCreateTransporterVendorReached, SystemInfo1, Trade, MsgCreateTransporterTradeRejected, Params, Transporter, QueryGetSystemInfo2Response, MsgUpdateParams, Purchaser, QueryGetSystemInfo1Request, QueryGetPurchaserResponse, GenesisState, QueryAllTransporterResponse, MsgCreateVendorResponse, QueryGetTradeRequest, QueryAllTradeResponse, MsgCreateVendorTradeRejectResponse, SystemInfo2, MsgCreateTransporterTradeAccepted, QueryParamsRequest, QueryGetSystemInfo3Response, SystemInfo4, MsgCreateVendor, QueryGetSystemInfo2Request, QueryGetSystemInfo3Request, MsgCreateVendorTradeAccept, QueryGetVendorRequest, QueryGetTransporterRequest, MsgCreateTradeResponse, MsgCreateTransporterTradeAcceptedResponse, QueryAllPurchaserResponse, QueryAllTransporterRequest, MsgCreateTransporterResponse, MsgCreateTransporterVendorReachedResponse };

type sendMsgCreateTransporterTradeRejectedResponseParams = {
  value: MsgCreateTransporterTradeRejectedResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVendorTradeRejectParams = {
  value: MsgCreateVendorTradeReject,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsResponseParams = {
  value: QueryParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllVendorRequestParams = {
  value: QueryAllVendorRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllVendorResponseParams = {
  value: QueryAllVendorResponse,
  fee?: StdFee,
  memo?: string
};

type sendVendorParams = {
  value: Vendor,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterParams = {
  value: MsgCreateTransporter,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetVendorResponseParams = {
  value: QueryGetVendorResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTransporterResponseParams = {
  value: QueryGetTransporterResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTradeResponseParams = {
  value: QueryGetTradeResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePurchaserResponseParams = {
  value: MsgCreatePurchaserResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVendorTradeAcceptResponseParams = {
  value: MsgCreateVendorTradeAcceptResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPurchaserRequestParams = {
  value: QueryGetPurchaserRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllPurchaserRequestParams = {
  value: QueryAllPurchaserRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo4ResponseParams = {
  value: QueryGetSystemInfo4Response,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo1ResponseParams = {
  value: QueryGetSystemInfo1Response,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTradeParams = {
  value: MsgCreateTrade,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreatePurchaserParams = {
  value: MsgCreatePurchaser,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo4RequestParams = {
  value: QueryGetSystemInfo4Request,
  fee?: StdFee,
  memo?: string
};

type sendSystemInfo3Params = {
  value: SystemInfo3,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTradeRequestParams = {
  value: QueryAllTradeRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterVendorReachedParams = {
  value: MsgCreateTransporterVendorReached,
  fee?: StdFee,
  memo?: string
};

type sendSystemInfo1Params = {
  value: SystemInfo1,
  fee?: StdFee,
  memo?: string
};

type sendTradeParams = {
  value: Trade,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterTradeRejectedParams = {
  value: MsgCreateTransporterTradeRejected,
  fee?: StdFee,
  memo?: string
};

type sendParamsParams = {
  value: Params,
  fee?: StdFee,
  memo?: string
};

type sendTransporterParams = {
  value: Transporter,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo2ResponseParams = {
  value: QueryGetSystemInfo2Response,
  fee?: StdFee,
  memo?: string
};

type sendMsgUpdateParamsParams = {
  value: MsgUpdateParams,
  fee?: StdFee,
  memo?: string
};

type sendPurchaserParams = {
  value: Purchaser,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo1RequestParams = {
  value: QueryGetSystemInfo1Request,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetPurchaserResponseParams = {
  value: QueryGetPurchaserResponse,
  fee?: StdFee,
  memo?: string
};

type sendGenesisStateParams = {
  value: GenesisState,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTransporterResponseParams = {
  value: QueryAllTransporterResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVendorResponseParams = {
  value: MsgCreateVendorResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTradeRequestParams = {
  value: QueryGetTradeRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTradeResponseParams = {
  value: QueryAllTradeResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVendorTradeRejectResponseParams = {
  value: MsgCreateVendorTradeRejectResponse,
  fee?: StdFee,
  memo?: string
};

type sendSystemInfo2Params = {
  value: SystemInfo2,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterTradeAcceptedParams = {
  value: MsgCreateTransporterTradeAccepted,
  fee?: StdFee,
  memo?: string
};

type sendQueryParamsRequestParams = {
  value: QueryParamsRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo3ResponseParams = {
  value: QueryGetSystemInfo3Response,
  fee?: StdFee,
  memo?: string
};

type sendSystemInfo4Params = {
  value: SystemInfo4,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVendorParams = {
  value: MsgCreateVendor,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo2RequestParams = {
  value: QueryGetSystemInfo2Request,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetSystemInfo3RequestParams = {
  value: QueryGetSystemInfo3Request,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateVendorTradeAcceptParams = {
  value: MsgCreateVendorTradeAccept,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetVendorRequestParams = {
  value: QueryGetVendorRequest,
  fee?: StdFee,
  memo?: string
};

type sendQueryGetTransporterRequestParams = {
  value: QueryGetTransporterRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTradeResponseParams = {
  value: MsgCreateTradeResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterTradeAcceptedResponseParams = {
  value: MsgCreateTransporterTradeAcceptedResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllPurchaserResponseParams = {
  value: QueryAllPurchaserResponse,
  fee?: StdFee,
  memo?: string
};

type sendQueryAllTransporterRequestParams = {
  value: QueryAllTransporterRequest,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterResponseParams = {
  value: MsgCreateTransporterResponse,
  fee?: StdFee,
  memo?: string
};

type sendMsgCreateTransporterVendorReachedResponseParams = {
  value: MsgCreateTransporterVendorReachedResponse,
  fee?: StdFee,
  memo?: string
};


type msgCreateTransporterTradeRejectedResponseParams = {
  value: MsgCreateTransporterTradeRejectedResponse,
};

type msgCreateVendorTradeRejectParams = {
  value: MsgCreateVendorTradeReject,
};

type queryParamsResponseParams = {
  value: QueryParamsResponse,
};

type queryAllVendorRequestParams = {
  value: QueryAllVendorRequest,
};

type queryAllVendorResponseParams = {
  value: QueryAllVendorResponse,
};

type vendorParams = {
  value: Vendor,
};

type msgCreateTransporterParams = {
  value: MsgCreateTransporter,
};

type queryGetVendorResponseParams = {
  value: QueryGetVendorResponse,
};

type queryGetTransporterResponseParams = {
  value: QueryGetTransporterResponse,
};

type queryGetTradeResponseParams = {
  value: QueryGetTradeResponse,
};

type msgCreatePurchaserResponseParams = {
  value: MsgCreatePurchaserResponse,
};

type msgUpdateParamsResponseParams = {
  value: MsgUpdateParamsResponse,
};

type msgCreateVendorTradeAcceptResponseParams = {
  value: MsgCreateVendorTradeAcceptResponse,
};

type queryGetPurchaserRequestParams = {
  value: QueryGetPurchaserRequest,
};

type queryAllPurchaserRequestParams = {
  value: QueryAllPurchaserRequest,
};

type queryGetSystemInfo4ResponseParams = {
  value: QueryGetSystemInfo4Response,
};

type queryGetSystemInfo1ResponseParams = {
  value: QueryGetSystemInfo1Response,
};

type msgCreateTradeParams = {
  value: MsgCreateTrade,
};

type msgCreatePurchaserParams = {
  value: MsgCreatePurchaser,
};

type queryGetSystemInfo4RequestParams = {
  value: QueryGetSystemInfo4Request,
};

type systemInfo3Params = {
  value: SystemInfo3,
};

type queryAllTradeRequestParams = {
  value: QueryAllTradeRequest,
};

type msgCreateTransporterVendorReachedParams = {
  value: MsgCreateTransporterVendorReached,
};

type systemInfo1Params = {
  value: SystemInfo1,
};

type tradeParams = {
  value: Trade,
};

type msgCreateTransporterTradeRejectedParams = {
  value: MsgCreateTransporterTradeRejected,
};

type paramsParams = {
  value: Params,
};

type transporterParams = {
  value: Transporter,
};

type queryGetSystemInfo2ResponseParams = {
  value: QueryGetSystemInfo2Response,
};

type msgUpdateParamsParams = {
  value: MsgUpdateParams,
};

type purchaserParams = {
  value: Purchaser,
};

type queryGetSystemInfo1RequestParams = {
  value: QueryGetSystemInfo1Request,
};

type queryGetPurchaserResponseParams = {
  value: QueryGetPurchaserResponse,
};

type genesisStateParams = {
  value: GenesisState,
};

type queryAllTransporterResponseParams = {
  value: QueryAllTransporterResponse,
};

type msgCreateVendorResponseParams = {
  value: MsgCreateVendorResponse,
};

type queryGetTradeRequestParams = {
  value: QueryGetTradeRequest,
};

type queryAllTradeResponseParams = {
  value: QueryAllTradeResponse,
};

type msgCreateVendorTradeRejectResponseParams = {
  value: MsgCreateVendorTradeRejectResponse,
};

type systemInfo2Params = {
  value: SystemInfo2,
};

type msgCreateTransporterTradeAcceptedParams = {
  value: MsgCreateTransporterTradeAccepted,
};

type queryParamsRequestParams = {
  value: QueryParamsRequest,
};

type queryGetSystemInfo3ResponseParams = {
  value: QueryGetSystemInfo3Response,
};

type systemInfo4Params = {
  value: SystemInfo4,
};

type msgCreateVendorParams = {
  value: MsgCreateVendor,
};

type queryGetSystemInfo2RequestParams = {
  value: QueryGetSystemInfo2Request,
};

type queryGetSystemInfo3RequestParams = {
  value: QueryGetSystemInfo3Request,
};

type msgCreateVendorTradeAcceptParams = {
  value: MsgCreateVendorTradeAccept,
};

type queryGetVendorRequestParams = {
  value: QueryGetVendorRequest,
};

type queryGetTransporterRequestParams = {
  value: QueryGetTransporterRequest,
};

type msgCreateTradeResponseParams = {
  value: MsgCreateTradeResponse,
};

type msgCreateTransporterTradeAcceptedResponseParams = {
  value: MsgCreateTransporterTradeAcceptedResponse,
};

type queryAllPurchaserResponseParams = {
  value: QueryAllPurchaserResponse,
};

type queryAllTransporterRequestParams = {
  value: QueryAllTransporterRequest,
};

type msgCreateTransporterResponseParams = {
  value: MsgCreateTransporterResponse,
};

type msgCreateTransporterVendorReachedResponseParams = {
  value: MsgCreateTransporterVendorReachedResponse,
};


export const registry = new Registry(msgTypes);

type Field = {
	name: string;
	type: unknown;
}
function getStructure(template) {
	const structure: {fields: Field[]} = { fields: [] }
	for (let [key, value] of Object.entries(template)) {
		let field = { name: key, type: typeof value }
		structure.fields.push(field)
	}
	return structure
}
const defaultFee = {
  amount: [],
  gas: "200000",
};

interface TxClientOptions {
  addr: string
	prefix: string
	signer?: OfflineSigner
}

export const txClient = ({ signer, prefix, addr }: TxClientOptions = { addr: "http://localhost:26657", prefix: "cosmos" }) => {

  return {
		
		async sendMsgCreateTransporterTradeRejectedResponse({ value, fee, memo }: sendMsgCreateTransporterTradeRejectedResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterTradeRejectedResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterTradeRejectedResponse({ value: MsgCreateTransporterTradeRejectedResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterTradeRejectedResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVendorTradeReject({ value, fee, memo }: sendMsgCreateVendorTradeRejectParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVendorTradeReject: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVendorTradeReject({ value: MsgCreateVendorTradeReject.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVendorTradeReject: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsResponse({ value, fee, memo }: sendQueryParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsResponse({ value: QueryParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllVendorRequest({ value, fee, memo }: sendQueryAllVendorRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllVendorRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllVendorRequest({ value: QueryAllVendorRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllVendorRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllVendorResponse({ value, fee, memo }: sendQueryAllVendorResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllVendorResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllVendorResponse({ value: QueryAllVendorResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllVendorResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendVendor({ value, fee, memo }: sendVendorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendVendor: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.vendor({ value: Vendor.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendVendor: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporter({ value, fee, memo }: sendMsgCreateTransporterParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporter: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporter({ value: MsgCreateTransporter.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporter: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetVendorResponse({ value, fee, memo }: sendQueryGetVendorResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetVendorResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetVendorResponse({ value: QueryGetVendorResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetVendorResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTransporterResponse({ value, fee, memo }: sendQueryGetTransporterResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTransporterResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTransporterResponse({ value: QueryGetTransporterResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTransporterResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTradeResponse({ value, fee, memo }: sendQueryGetTradeResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTradeResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTradeResponse({ value: QueryGetTradeResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTradeResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePurchaserResponse({ value, fee, memo }: sendMsgCreatePurchaserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePurchaserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreatePurchaserResponse({ value: MsgCreatePurchaserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePurchaserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParamsResponse({ value, fee, memo }: sendMsgUpdateParamsResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParamsResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParamsResponse({ value: MsgUpdateParamsResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParamsResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVendorTradeAcceptResponse({ value, fee, memo }: sendMsgCreateVendorTradeAcceptResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVendorTradeAcceptResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVendorTradeAcceptResponse({ value: MsgCreateVendorTradeAcceptResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVendorTradeAcceptResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPurchaserRequest({ value, fee, memo }: sendQueryGetPurchaserRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPurchaserRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPurchaserRequest({ value: QueryGetPurchaserRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPurchaserRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllPurchaserRequest({ value, fee, memo }: sendQueryAllPurchaserRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllPurchaserRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllPurchaserRequest({ value: QueryAllPurchaserRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllPurchaserRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo4Response({ value, fee, memo }: sendQueryGetSystemInfo4ResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo4Response: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo4Response({ value: QueryGetSystemInfo4Response.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo4Response: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo1Response({ value, fee, memo }: sendQueryGetSystemInfo1ResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo1Response: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo1Response({ value: QueryGetSystemInfo1Response.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo1Response: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTrade({ value, fee, memo }: sendMsgCreateTradeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTrade: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTrade({ value: MsgCreateTrade.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTrade: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreatePurchaser({ value, fee, memo }: sendMsgCreatePurchaserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreatePurchaser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreatePurchaser({ value: MsgCreatePurchaser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreatePurchaser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo4Request({ value, fee, memo }: sendQueryGetSystemInfo4RequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo4Request: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo4Request({ value: QueryGetSystemInfo4Request.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo4Request: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendSystemInfo3({ value, fee, memo }: sendSystemInfo3Params): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendSystemInfo3: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.systemInfo3({ value: SystemInfo3.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendSystemInfo3: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTradeRequest({ value, fee, memo }: sendQueryAllTradeRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTradeRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTradeRequest({ value: QueryAllTradeRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTradeRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporterVendorReached({ value, fee, memo }: sendMsgCreateTransporterVendorReachedParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterVendorReached: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterVendorReached({ value: MsgCreateTransporterVendorReached.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterVendorReached: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendSystemInfo1({ value, fee, memo }: sendSystemInfo1Params): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendSystemInfo1: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.systemInfo1({ value: SystemInfo1.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendSystemInfo1: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTrade({ value, fee, memo }: sendTradeParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTrade: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.trade({ value: Trade.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTrade: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporterTradeRejected({ value, fee, memo }: sendMsgCreateTransporterTradeRejectedParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterTradeRejected: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterTradeRejected({ value: MsgCreateTransporterTradeRejected.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterTradeRejected: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendParams({ value, fee, memo }: sendParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.params({ value: Params.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendTransporter({ value, fee, memo }: sendTransporterParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendTransporter: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.transporter({ value: Transporter.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendTransporter: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo2Response({ value, fee, memo }: sendQueryGetSystemInfo2ResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo2Response: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo2Response({ value: QueryGetSystemInfo2Response.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo2Response: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgUpdateParams({ value, fee, memo }: sendMsgUpdateParamsParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgUpdateParams: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgUpdateParams({ value: MsgUpdateParams.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgUpdateParams: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendPurchaser({ value, fee, memo }: sendPurchaserParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendPurchaser: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.purchaser({ value: Purchaser.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendPurchaser: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo1Request({ value, fee, memo }: sendQueryGetSystemInfo1RequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo1Request: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo1Request({ value: QueryGetSystemInfo1Request.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo1Request: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetPurchaserResponse({ value, fee, memo }: sendQueryGetPurchaserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetPurchaserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetPurchaserResponse({ value: QueryGetPurchaserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetPurchaserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendGenesisState({ value, fee, memo }: sendGenesisStateParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendGenesisState: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.genesisState({ value: GenesisState.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendGenesisState: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTransporterResponse({ value, fee, memo }: sendQueryAllTransporterResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTransporterResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTransporterResponse({ value: QueryAllTransporterResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTransporterResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVendorResponse({ value, fee, memo }: sendMsgCreateVendorResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVendorResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVendorResponse({ value: MsgCreateVendorResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVendorResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTradeRequest({ value, fee, memo }: sendQueryGetTradeRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTradeRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTradeRequest({ value: QueryGetTradeRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTradeRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTradeResponse({ value, fee, memo }: sendQueryAllTradeResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTradeResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTradeResponse({ value: QueryAllTradeResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTradeResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVendorTradeRejectResponse({ value, fee, memo }: sendMsgCreateVendorTradeRejectResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVendorTradeRejectResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVendorTradeRejectResponse({ value: MsgCreateVendorTradeRejectResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVendorTradeRejectResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendSystemInfo2({ value, fee, memo }: sendSystemInfo2Params): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendSystemInfo2: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.systemInfo2({ value: SystemInfo2.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendSystemInfo2: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporterTradeAccepted({ value, fee, memo }: sendMsgCreateTransporterTradeAcceptedParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterTradeAccepted: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterTradeAccepted({ value: MsgCreateTransporterTradeAccepted.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterTradeAccepted: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryParamsRequest({ value, fee, memo }: sendQueryParamsRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryParamsRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryParamsRequest({ value: QueryParamsRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryParamsRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo3Response({ value, fee, memo }: sendQueryGetSystemInfo3ResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo3Response: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo3Response({ value: QueryGetSystemInfo3Response.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo3Response: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendSystemInfo4({ value, fee, memo }: sendSystemInfo4Params): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendSystemInfo4: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.systemInfo4({ value: SystemInfo4.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendSystemInfo4: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVendor({ value, fee, memo }: sendMsgCreateVendorParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVendor: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVendor({ value: MsgCreateVendor.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVendor: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo2Request({ value, fee, memo }: sendQueryGetSystemInfo2RequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo2Request: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo2Request({ value: QueryGetSystemInfo2Request.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo2Request: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetSystemInfo3Request({ value, fee, memo }: sendQueryGetSystemInfo3RequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetSystemInfo3Request: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetSystemInfo3Request({ value: QueryGetSystemInfo3Request.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetSystemInfo3Request: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateVendorTradeAccept({ value, fee, memo }: sendMsgCreateVendorTradeAcceptParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateVendorTradeAccept: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateVendorTradeAccept({ value: MsgCreateVendorTradeAccept.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateVendorTradeAccept: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetVendorRequest({ value, fee, memo }: sendQueryGetVendorRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetVendorRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetVendorRequest({ value: QueryGetVendorRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetVendorRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryGetTransporterRequest({ value, fee, memo }: sendQueryGetTransporterRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryGetTransporterRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryGetTransporterRequest({ value: QueryGetTransporterRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryGetTransporterRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTradeResponse({ value, fee, memo }: sendMsgCreateTradeResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTradeResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTradeResponse({ value: MsgCreateTradeResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTradeResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporterTradeAcceptedResponse({ value, fee, memo }: sendMsgCreateTransporterTradeAcceptedResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterTradeAcceptedResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterTradeAcceptedResponse({ value: MsgCreateTransporterTradeAcceptedResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterTradeAcceptedResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllPurchaserResponse({ value, fee, memo }: sendQueryAllPurchaserResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllPurchaserResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllPurchaserResponse({ value: QueryAllPurchaserResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllPurchaserResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendQueryAllTransporterRequest({ value, fee, memo }: sendQueryAllTransporterRequestParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendQueryAllTransporterRequest: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.queryAllTransporterRequest({ value: QueryAllTransporterRequest.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendQueryAllTransporterRequest: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporterResponse({ value, fee, memo }: sendMsgCreateTransporterResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterResponse({ value: MsgCreateTransporterResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		async sendMsgCreateTransporterVendorReachedResponse({ value, fee, memo }: sendMsgCreateTransporterVendorReachedResponseParams): Promise<DeliverTxResponse> {
			if (!signer) {
					throw new Error('TxClient:sendMsgCreateTransporterVendorReachedResponse: Unable to sign Tx. Signer is not present.')
			}
			try {			
				const { address } = (await signer.getAccounts())[0]; 
				const signingClient = await SigningStargateClient.connectWithSigner(addr,signer,{registry});
				let msg = this.msgCreateTransporterVendorReachedResponse({ value: MsgCreateTransporterVendorReachedResponse.fromPartial(value) })
				return await signingClient.signAndBroadcast(address, [msg], fee ? fee : defaultFee, memo)
			} catch (e: any) {
				throw new Error('TxClient:sendMsgCreateTransporterVendorReachedResponse: Could not broadcast Tx: '+ e.message)
			}
		},
		
		
		msgCreateTransporterTradeRejectedResponse({ value }: msgCreateTransporterTradeRejectedResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterTradeRejectedResponse", value: MsgCreateTransporterTradeRejectedResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterTradeRejectedResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVendorTradeReject({ value }: msgCreateVendorTradeRejectParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateVendorTradeReject", value: MsgCreateVendorTradeReject.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVendorTradeReject: Could not create message: ' + e.message)
			}
		},
		
		queryParamsResponse({ value }: queryParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryParamsResponse", value: QueryParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllVendorRequest({ value }: queryAllVendorRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllVendorRequest", value: QueryAllVendorRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllVendorRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllVendorResponse({ value }: queryAllVendorResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllVendorResponse", value: QueryAllVendorResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllVendorResponse: Could not create message: ' + e.message)
			}
		},
		
		vendor({ value }: vendorParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.Vendor", value: Vendor.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Vendor: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporter({ value }: msgCreateTransporterParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporter", value: MsgCreateTransporter.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporter: Could not create message: ' + e.message)
			}
		},
		
		queryGetVendorResponse({ value }: queryGetVendorResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetVendorResponse", value: QueryGetVendorResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetVendorResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTransporterResponse({ value }: queryGetTransporterResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetTransporterResponse", value: QueryGetTransporterResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTransporterResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTradeResponse({ value }: queryGetTradeResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetTradeResponse", value: QueryGetTradeResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTradeResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePurchaserResponse({ value }: msgCreatePurchaserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreatePurchaserResponse", value: MsgCreatePurchaserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePurchaserResponse: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParamsResponse({ value }: msgUpdateParamsResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgUpdateParamsResponse", value: MsgUpdateParamsResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParamsResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVendorTradeAcceptResponse({ value }: msgCreateVendorTradeAcceptResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateVendorTradeAcceptResponse", value: MsgCreateVendorTradeAcceptResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVendorTradeAcceptResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetPurchaserRequest({ value }: queryGetPurchaserRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetPurchaserRequest", value: QueryGetPurchaserRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPurchaserRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllPurchaserRequest({ value }: queryAllPurchaserRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllPurchaserRequest", value: QueryAllPurchaserRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllPurchaserRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo4Response({ value }: queryGetSystemInfo4ResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo4Response", value: QueryGetSystemInfo4Response.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo4Response: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo1Response({ value }: queryGetSystemInfo1ResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo1Response", value: QueryGetSystemInfo1Response.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo1Response: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTrade({ value }: msgCreateTradeParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTrade", value: MsgCreateTrade.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTrade: Could not create message: ' + e.message)
			}
		},
		
		msgCreatePurchaser({ value }: msgCreatePurchaserParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreatePurchaser", value: MsgCreatePurchaser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreatePurchaser: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo4Request({ value }: queryGetSystemInfo4RequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo4Request", value: QueryGetSystemInfo4Request.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo4Request: Could not create message: ' + e.message)
			}
		},
		
		systemInfo3({ value }: systemInfo3Params): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.SystemInfo3", value: SystemInfo3.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:SystemInfo3: Could not create message: ' + e.message)
			}
		},
		
		queryAllTradeRequest({ value }: queryAllTradeRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllTradeRequest", value: QueryAllTradeRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTradeRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporterVendorReached({ value }: msgCreateTransporterVendorReachedParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterVendorReached", value: MsgCreateTransporterVendorReached.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterVendorReached: Could not create message: ' + e.message)
			}
		},
		
		systemInfo1({ value }: systemInfo1Params): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.SystemInfo1", value: SystemInfo1.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:SystemInfo1: Could not create message: ' + e.message)
			}
		},
		
		trade({ value }: tradeParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.Trade", value: Trade.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Trade: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporterTradeRejected({ value }: msgCreateTransporterTradeRejectedParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterTradeRejected", value: MsgCreateTransporterTradeRejected.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterTradeRejected: Could not create message: ' + e.message)
			}
		},
		
		params({ value }: paramsParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.Params", value: Params.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Params: Could not create message: ' + e.message)
			}
		},
		
		transporter({ value }: transporterParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.Transporter", value: Transporter.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Transporter: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo2Response({ value }: queryGetSystemInfo2ResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo2Response", value: QueryGetSystemInfo2Response.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo2Response: Could not create message: ' + e.message)
			}
		},
		
		msgUpdateParams({ value }: msgUpdateParamsParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgUpdateParams", value: MsgUpdateParams.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgUpdateParams: Could not create message: ' + e.message)
			}
		},
		
		purchaser({ value }: purchaserParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.Purchaser", value: Purchaser.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:Purchaser: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo1Request({ value }: queryGetSystemInfo1RequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo1Request", value: QueryGetSystemInfo1Request.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo1Request: Could not create message: ' + e.message)
			}
		},
		
		queryGetPurchaserResponse({ value }: queryGetPurchaserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetPurchaserResponse", value: QueryGetPurchaserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetPurchaserResponse: Could not create message: ' + e.message)
			}
		},
		
		genesisState({ value }: genesisStateParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.GenesisState", value: GenesisState.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:GenesisState: Could not create message: ' + e.message)
			}
		},
		
		queryAllTransporterResponse({ value }: queryAllTransporterResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllTransporterResponse", value: QueryAllTransporterResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTransporterResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVendorResponse({ value }: msgCreateVendorResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateVendorResponse", value: MsgCreateVendorResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVendorResponse: Could not create message: ' + e.message)
			}
		},
		
		queryGetTradeRequest({ value }: queryGetTradeRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetTradeRequest", value: QueryGetTradeRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTradeRequest: Could not create message: ' + e.message)
			}
		},
		
		queryAllTradeResponse({ value }: queryAllTradeResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllTradeResponse", value: QueryAllTradeResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTradeResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVendorTradeRejectResponse({ value }: msgCreateVendorTradeRejectResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateVendorTradeRejectResponse", value: MsgCreateVendorTradeRejectResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVendorTradeRejectResponse: Could not create message: ' + e.message)
			}
		},
		
		systemInfo2({ value }: systemInfo2Params): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.SystemInfo2", value: SystemInfo2.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:SystemInfo2: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporterTradeAccepted({ value }: msgCreateTransporterTradeAcceptedParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterTradeAccepted", value: MsgCreateTransporterTradeAccepted.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterTradeAccepted: Could not create message: ' + e.message)
			}
		},
		
		queryParamsRequest({ value }: queryParamsRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryParamsRequest", value: QueryParamsRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryParamsRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo3Response({ value }: queryGetSystemInfo3ResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo3Response", value: QueryGetSystemInfo3Response.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo3Response: Could not create message: ' + e.message)
			}
		},
		
		systemInfo4({ value }: systemInfo4Params): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.SystemInfo4", value: SystemInfo4.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:SystemInfo4: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVendor({ value }: msgCreateVendorParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateVendor", value: MsgCreateVendor.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVendor: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo2Request({ value }: queryGetSystemInfo2RequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo2Request", value: QueryGetSystemInfo2Request.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo2Request: Could not create message: ' + e.message)
			}
		},
		
		queryGetSystemInfo3Request({ value }: queryGetSystemInfo3RequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetSystemInfo3Request", value: QueryGetSystemInfo3Request.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetSystemInfo3Request: Could not create message: ' + e.message)
			}
		},
		
		msgCreateVendorTradeAccept({ value }: msgCreateVendorTradeAcceptParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateVendorTradeAccept", value: MsgCreateVendorTradeAccept.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateVendorTradeAccept: Could not create message: ' + e.message)
			}
		},
		
		queryGetVendorRequest({ value }: queryGetVendorRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetVendorRequest", value: QueryGetVendorRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetVendorRequest: Could not create message: ' + e.message)
			}
		},
		
		queryGetTransporterRequest({ value }: queryGetTransporterRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryGetTransporterRequest", value: QueryGetTransporterRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryGetTransporterRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTradeResponse({ value }: msgCreateTradeResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTradeResponse", value: MsgCreateTradeResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTradeResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporterTradeAcceptedResponse({ value }: msgCreateTransporterTradeAcceptedResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterTradeAcceptedResponse", value: MsgCreateTransporterTradeAcceptedResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterTradeAcceptedResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllPurchaserResponse({ value }: queryAllPurchaserResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllPurchaserResponse", value: QueryAllPurchaserResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllPurchaserResponse: Could not create message: ' + e.message)
			}
		},
		
		queryAllTransporterRequest({ value }: queryAllTransporterRequestParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.QueryAllTransporterRequest", value: QueryAllTransporterRequest.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:QueryAllTransporterRequest: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporterResponse({ value }: msgCreateTransporterResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterResponse", value: MsgCreateTransporterResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterResponse: Could not create message: ' + e.message)
			}
		},
		
		msgCreateTransporterVendorReachedResponse({ value }: msgCreateTransporterVendorReachedResponseParams): EncodeObject {
			try {
				return { typeUrl: "/logisticsbeta.logisticsbeta.MsgCreateTransporterVendorReachedResponse", value: MsgCreateTransporterVendorReachedResponse.fromPartial( value ) }  
			} catch (e: any) {
				throw new Error('TxClient:MsgCreateTransporterVendorReachedResponse: Could not create message: ' + e.message)
			}
		},
		
	}
};

interface QueryClientOptions {
  addr: string
}

export const queryClient = ({ addr: addr }: QueryClientOptions = { addr: "http://localhost:1317" }) => {
  return new Api({ baseURL: addr });
};

class SDKModule {
	public query: ReturnType<typeof queryClient>;
	public tx: ReturnType<typeof txClient>;
	public structure: Record<string,unknown>;
	public registry: Array<[string, GeneratedType]> = [];

	constructor(client: IgniteClient) {		
	
		this.query = queryClient({ addr: client.env.apiURL });		
		this.updateTX(client);
		this.structure =  {
						
		};
		client.on('signer-changed',(signer) => {			
		 this.updateTX(client);
		})
	}
	updateTX(client: IgniteClient) {
    const methods = txClient({
        signer: client.signer,
        addr: client.env.rpcURL,
        prefix: client.env.prefix ?? "cosmos",
    })
	
    this.tx = methods;
    for (let m in methods) {
        this.tx[m] = methods[m].bind(this.tx);
    }
	}
};

const IgntModule = (test: IgniteClient) => {
	return {
		module: {
			LogisticsbetaLogisticsbeta: new SDKModule(test)
		},
		registry: msgTypes
  }
}
export default IgntModule;