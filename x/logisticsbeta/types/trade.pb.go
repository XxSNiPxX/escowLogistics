// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logisticsbeta/logisticsbeta/trade.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Trade struct {
	Tradeid                         string `protobuf:"bytes,1,opt,name=tradeid,proto3" json:"tradeid,omitempty"`
	TradeState                      string `protobuf:"bytes,2,opt,name=tradeState,proto3" json:"tradeState,omitempty"`
	PurchaserId                     uint64 `protobuf:"varint,3,opt,name=purchaserId,proto3" json:"purchaserId,omitempty"`
	VendorId                        uint64 `protobuf:"varint,4,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	TransportId                     uint64 `protobuf:"varint,5,opt,name=transportId,proto3" json:"transportId,omitempty"`
	Commodity                       string `protobuf:"bytes,6,opt,name=commodity,proto3" json:"commodity,omitempty"`
	PurchaserLocation               string `protobuf:"bytes,7,opt,name=purchaserLocation,proto3" json:"purchaserLocation,omitempty"`
	VendorLocation                  string `protobuf:"bytes,8,opt,name=vendorLocation,proto3" json:"vendorLocation,omitempty"`
	CommodityPrice                  uint64 `protobuf:"varint,9,opt,name=commodityPrice,proto3" json:"commodityPrice,omitempty"`
	TransportPrice                  uint64 `protobuf:"varint,10,opt,name=transportPrice,proto3" json:"transportPrice,omitempty"`
	VendorTradePending              bool   `protobuf:"varint,11,opt,name=vendorTradePending,proto3" json:"vendorTradePending,omitempty"`
	VendorTradeAccepted             bool   `protobuf:"varint,12,opt,name=vendorTradeAccepted,proto3" json:"vendorTradeAccepted,omitempty"`
	VendorTradeRejected             bool   `protobuf:"varint,13,opt,name=vendorTradeRejected,proto3" json:"vendorTradeRejected,omitempty"`
	VendorCommodityDispatched       bool   `protobuf:"varint,14,opt,name=vendorCommodityDispatched,proto3" json:"vendorCommodityDispatched,omitempty"`
	TransporterTradePending         bool   `protobuf:"varint,15,opt,name=transporterTradePending,proto3" json:"transporterTradePending,omitempty"`
	TransporterTradeAccepted        bool   `protobuf:"varint,16,opt,name=transporterTradeAccepted,proto3" json:"transporterTradeAccepted,omitempty"`
	TransporterTradeRejected        bool   `protobuf:"varint,17,opt,name=transporterTradeRejected,proto3" json:"transporterTradeRejected,omitempty"`
	TransporterVendorReached        bool   `protobuf:"varint,18,opt,name=transporterVendorReached,proto3" json:"transporterVendorReached,omitempty"`
	TransporterCommodityCollected   bool   `protobuf:"varint,19,opt,name=transporterCommodityCollected,proto3" json:"transporterCommodityCollected,omitempty"`
	TransporterPurchaserReached     bool   `protobuf:"varint,20,opt,name=transporterPurchaserReached,proto3" json:"transporterPurchaserReached,omitempty"`
	TransporterCommodityDistributed bool   `protobuf:"varint,21,opt,name=transporterCommodityDistributed,proto3" json:"transporterCommodityDistributed,omitempty"`
	Deadline                        string `protobuf:"bytes,22,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (m *Trade) Reset()         { *m = Trade{} }
func (m *Trade) String() string { return proto.CompactTextString(m) }
func (*Trade) ProtoMessage()    {}
func (*Trade) Descriptor() ([]byte, []int) {
	return fileDescriptor_3ccd9c468d7378ad, []int{0}
}
func (m *Trade) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Trade) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Trade.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Trade) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Trade.Merge(m, src)
}
func (m *Trade) XXX_Size() int {
	return m.Size()
}
func (m *Trade) XXX_DiscardUnknown() {
	xxx_messageInfo_Trade.DiscardUnknown(m)
}

var xxx_messageInfo_Trade proto.InternalMessageInfo

func (m *Trade) GetTradeid() string {
	if m != nil {
		return m.Tradeid
	}
	return ""
}

func (m *Trade) GetTradeState() string {
	if m != nil {
		return m.TradeState
	}
	return ""
}

func (m *Trade) GetPurchaserId() uint64 {
	if m != nil {
		return m.PurchaserId
	}
	return 0
}

func (m *Trade) GetVendorId() uint64 {
	if m != nil {
		return m.VendorId
	}
	return 0
}

func (m *Trade) GetTransportId() uint64 {
	if m != nil {
		return m.TransportId
	}
	return 0
}

func (m *Trade) GetCommodity() string {
	if m != nil {
		return m.Commodity
	}
	return ""
}

func (m *Trade) GetPurchaserLocation() string {
	if m != nil {
		return m.PurchaserLocation
	}
	return ""
}

func (m *Trade) GetVendorLocation() string {
	if m != nil {
		return m.VendorLocation
	}
	return ""
}

func (m *Trade) GetCommodityPrice() uint64 {
	if m != nil {
		return m.CommodityPrice
	}
	return 0
}

func (m *Trade) GetTransportPrice() uint64 {
	if m != nil {
		return m.TransportPrice
	}
	return 0
}

func (m *Trade) GetVendorTradePending() bool {
	if m != nil {
		return m.VendorTradePending
	}
	return false
}

func (m *Trade) GetVendorTradeAccepted() bool {
	if m != nil {
		return m.VendorTradeAccepted
	}
	return false
}

func (m *Trade) GetVendorTradeRejected() bool {
	if m != nil {
		return m.VendorTradeRejected
	}
	return false
}

func (m *Trade) GetVendorCommodityDispatched() bool {
	if m != nil {
		return m.VendorCommodityDispatched
	}
	return false
}

func (m *Trade) GetTransporterTradePending() bool {
	if m != nil {
		return m.TransporterTradePending
	}
	return false
}

func (m *Trade) GetTransporterTradeAccepted() bool {
	if m != nil {
		return m.TransporterTradeAccepted
	}
	return false
}

func (m *Trade) GetTransporterTradeRejected() bool {
	if m != nil {
		return m.TransporterTradeRejected
	}
	return false
}

func (m *Trade) GetTransporterVendorReached() bool {
	if m != nil {
		return m.TransporterVendorReached
	}
	return false
}

func (m *Trade) GetTransporterCommodityCollected() bool {
	if m != nil {
		return m.TransporterCommodityCollected
	}
	return false
}

func (m *Trade) GetTransporterPurchaserReached() bool {
	if m != nil {
		return m.TransporterPurchaserReached
	}
	return false
}

func (m *Trade) GetTransporterCommodityDistributed() bool {
	if m != nil {
		return m.TransporterCommodityDistributed
	}
	return false
}

func (m *Trade) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func init() {
	proto.RegisterType((*Trade)(nil), "logisticsbeta.logisticsbeta.Trade")
}

func init() {
	proto.RegisterFile("logisticsbeta/logisticsbeta/trade.proto", fileDescriptor_3ccd9c468d7378ad)
}

var fileDescriptor_3ccd9c468d7378ad = []byte{
	// 491 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0x8e, 0xa1, 0x3f, 0xc9, 0x14, 0x0a, 0x9d, 0xf2, 0xb3, 0x50, 0x30, 0x11, 0x07, 0xc8, 0x01,
	0xa5, 0x48, 0x1c, 0x40, 0x88, 0x03, 0xb4, 0x39, 0x50, 0x09, 0xa1, 0xe0, 0x22, 0x54, 0x71, 0x73,
	0x76, 0x57, 0xc9, 0xa2, 0xc4, 0x6b, 0xd9, 0x1b, 0x94, 0xbe, 0x05, 0x12, 0x2f, 0xc5, 0xb1, 0x47,
	0x8e, 0x28, 0x79, 0x11, 0xb4, 0x63, 0x79, 0x6b, 0x3b, 0x4e, 0x7a, 0xf3, 0x7c, 0x3f, 0x3b, 0xf3,
	0xad, 0xbc, 0x03, 0xcf, 0xc7, 0x7a, 0xa8, 0x52, 0xa3, 0x78, 0x3a, 0x90, 0x26, 0x3c, 0x2c, 0x57,
	0x26, 0x09, 0x85, 0xec, 0xc6, 0x89, 0x36, 0x1a, 0x0f, 0x4a, 0x54, 0xb7, 0x54, 0x3d, 0xfd, 0xdd,
	0x84, 0xcd, 0xaf, 0x56, 0x8c, 0x0c, 0xb6, 0xc9, 0xa5, 0x04, 0xf3, 0xda, 0x5e, 0xa7, 0x15, 0xe4,
	0x25, 0xfa, 0x00, 0xf4, 0x79, 0x6a, 0x42, 0x23, 0xd9, 0x35, 0x22, 0x0b, 0x08, 0xb6, 0x61, 0x27,
	0x9e, 0x26, 0x7c, 0x14, 0xa6, 0x32, 0x39, 0x11, 0xec, 0x7a, 0xdb, 0xeb, 0x6c, 0x04, 0x45, 0x08,
	0x1f, 0x42, 0xf3, 0xa7, 0x8c, 0x84, 0xb6, 0xf4, 0x06, 0xd1, 0xae, 0xb6, 0x6e, 0x93, 0x84, 0x51,
	0x1a, 0xeb, 0xc4, 0x9c, 0x08, 0xb6, 0x99, 0xb9, 0x0b, 0x10, 0x3e, 0x82, 0x16, 0xd7, 0x93, 0x89,
	0x16, 0xca, 0x9c, 0xb3, 0x2d, 0x6a, 0x7f, 0x09, 0xe0, 0x0b, 0xd8, 0x73, 0xad, 0x3e, 0x69, 0x1e,
	0x1a, 0xa5, 0x23, 0xb6, 0x4d, 0xaa, 0x65, 0x02, 0x9f, 0xc1, 0x6e, 0xd6, 0xd9, 0x49, 0x9b, 0x24,
	0xad, 0xa0, 0x56, 0xe7, 0x5a, 0xf4, 0x13, 0xc5, 0x25, 0x6b, 0xd1, 0x60, 0x15, 0xd4, 0xea, 0xdc,
	0xa8, 0x99, 0x0e, 0x32, 0x5d, 0x19, 0xc5, 0x2e, 0x60, 0xd6, 0x81, 0x2e, 0xbb, 0x2f, 0x23, 0xa1,
	0xa2, 0x21, 0xdb, 0x69, 0x7b, 0x9d, 0x66, 0x50, 0xc3, 0xe0, 0x4b, 0xd8, 0x2f, 0xa0, 0x1f, 0x38,
	0x97, 0xb1, 0x91, 0x82, 0xdd, 0x20, 0x43, 0x1d, 0x55, 0x71, 0x04, 0xf2, 0x87, 0xe4, 0xd6, 0x71,
	0x73, 0xc9, 0x91, 0x53, 0xf8, 0x0e, 0x1e, 0x64, 0xf0, 0x71, 0x9e, 0xa9, 0xa7, 0xd2, 0x38, 0x34,
	0x7c, 0x24, 0x05, 0xdb, 0x25, 0xdf, 0x6a, 0x01, 0xbe, 0x81, 0xfb, 0x2e, 0xa3, 0x2c, 0xc7, 0xba,
	0x45, 0xde, 0x55, 0x34, 0xbe, 0x05, 0x56, 0xa5, 0x5c, 0xc0, 0xdb, 0x64, 0x5d, 0xc9, 0xd7, 0x79,
	0x5d, 0xd4, 0xbd, 0x7a, 0xaf, 0xcb, 0x5b, 0xf6, 0x7e, 0xa3, 0x64, 0x81, 0x0c, 0x29, 0x2e, 0x2e,
	0x79, 0x4b, 0x3c, 0xf6, 0xe0, 0x71, 0x81, 0x73, 0xf7, 0x71, 0xac, 0xc7, 0xe3, 0xac, 0xf9, 0x3e,
	0x1d, 0xb0, 0x5e, 0x84, 0xef, 0xe1, 0xa0, 0x20, 0xe8, 0xe7, 0x7f, 0x67, 0x3e, 0xc4, 0x1d, 0x3a,
	0x63, 0x9d, 0x04, 0x3f, 0xc2, 0x93, 0xba, 0x16, 0x3d, 0x95, 0x9a, 0x44, 0x0d, 0xa6, 0x76, 0x92,
	0xbb, 0x74, 0xca, 0x55, 0x32, 0xfb, 0x26, 0x85, 0x0c, 0xc5, 0x58, 0x45, 0x92, 0xdd, 0xa3, 0x37,
	0xe0, 0xea, 0xa3, 0x2f, 0x7f, 0xe6, 0xbe, 0x77, 0x31, 0xf7, 0xbd, 0x7f, 0x73, 0xdf, 0xfb, 0xb5,
	0xf0, 0x1b, 0x17, 0x0b, 0xbf, 0xf1, 0x77, 0xe1, 0x37, 0xbe, 0xbf, 0x1e, 0x2a, 0x33, 0x9a, 0x0e,
	0xba, 0x5c, 0x4f, 0x0e, 0xcf, 0x66, 0xa7, 0x9f, 0x55, 0x7f, 0x76, 0x76, 0xb9, 0x7b, 0x8e, 0xec,
	0xee, 0x99, 0x55, 0x77, 0xd1, 0x79, 0x2c, 0xd3, 0xc1, 0x16, 0x2d, 0xa3, 0x57, 0xff, 0x03, 0x00,
	0x00, 0xff, 0xff, 0x3c, 0xa3, 0x69, 0x66, 0xb7, 0x04, 0x00, 0x00,
}

func (m *Trade) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Trade) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Trade) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb2
	}
	if m.TransporterCommodityDistributed {
		i--
		if m.TransporterCommodityDistributed {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.TransporterPurchaserReached {
		i--
		if m.TransporterPurchaserReached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.TransporterCommodityCollected {
		i--
		if m.TransporterCommodityCollected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.TransporterVendorReached {
		i--
		if m.TransporterVendorReached {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if m.TransporterTradeRejected {
		i--
		if m.TransporterTradeRejected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x88
	}
	if m.TransporterTradeAccepted {
		i--
		if m.TransporterTradeAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.TransporterTradePending {
		i--
		if m.TransporterTradePending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x78
	}
	if m.VendorCommodityDispatched {
		i--
		if m.VendorCommodityDispatched {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x70
	}
	if m.VendorTradeRejected {
		i--
		if m.VendorTradeRejected {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x68
	}
	if m.VendorTradeAccepted {
		i--
		if m.VendorTradeAccepted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x60
	}
	if m.VendorTradePending {
		i--
		if m.VendorTradePending {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x58
	}
	if m.TransportPrice != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.TransportPrice))
		i--
		dAtA[i] = 0x50
	}
	if m.CommodityPrice != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.CommodityPrice))
		i--
		dAtA[i] = 0x48
	}
	if len(m.VendorLocation) > 0 {
		i -= len(m.VendorLocation)
		copy(dAtA[i:], m.VendorLocation)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.VendorLocation)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.PurchaserLocation) > 0 {
		i -= len(m.PurchaserLocation)
		copy(dAtA[i:], m.PurchaserLocation)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.PurchaserLocation)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Commodity) > 0 {
		i -= len(m.Commodity)
		copy(dAtA[i:], m.Commodity)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Commodity)))
		i--
		dAtA[i] = 0x32
	}
	if m.TransportId != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.TransportId))
		i--
		dAtA[i] = 0x28
	}
	if m.VendorId != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.VendorId))
		i--
		dAtA[i] = 0x20
	}
	if m.PurchaserId != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.PurchaserId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.TradeState) > 0 {
		i -= len(m.TradeState)
		copy(dAtA[i:], m.TradeState)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.TradeState)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Tradeid) > 0 {
		i -= len(m.Tradeid)
		copy(dAtA[i:], m.Tradeid)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Tradeid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Trade) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tradeid)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.TradeState)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.PurchaserId != 0 {
		n += 1 + sovTrade(uint64(m.PurchaserId))
	}
	if m.VendorId != 0 {
		n += 1 + sovTrade(uint64(m.VendorId))
	}
	if m.TransportId != 0 {
		n += 1 + sovTrade(uint64(m.TransportId))
	}
	l = len(m.Commodity)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.PurchaserLocation)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.VendorLocation)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.CommodityPrice != 0 {
		n += 1 + sovTrade(uint64(m.CommodityPrice))
	}
	if m.TransportPrice != 0 {
		n += 1 + sovTrade(uint64(m.TransportPrice))
	}
	if m.VendorTradePending {
		n += 2
	}
	if m.VendorTradeAccepted {
		n += 2
	}
	if m.VendorTradeRejected {
		n += 2
	}
	if m.VendorCommodityDispatched {
		n += 2
	}
	if m.TransporterTradePending {
		n += 2
	}
	if m.TransporterTradeAccepted {
		n += 3
	}
	if m.TransporterTradeRejected {
		n += 3
	}
	if m.TransporterVendorReached {
		n += 3
	}
	if m.TransporterCommodityCollected {
		n += 3
	}
	if m.TransporterPurchaserReached {
		n += 3
	}
	if m.TransporterCommodityDistributed {
		n += 3
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 2 + l + sovTrade(uint64(l))
	}
	return n
}

func sovTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrade(x uint64) (n int) {
	return sovTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Trade) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Trade: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tradeid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tradeid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeState", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeState = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaserId", wireType)
			}
			m.PurchaserId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PurchaserId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
			}
			m.VendorId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VendorId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportId", wireType)
			}
			m.TransportId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commodity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commodity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PurchaserLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PurchaserLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorLocation", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VendorLocation = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommodityPrice", wireType)
			}
			m.CommodityPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommodityPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransportPrice", wireType)
			}
			m.TransportPrice = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransportPrice |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorTradePending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VendorTradePending = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorTradeAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VendorTradeAccepted = bool(v != 0)
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorTradeRejected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VendorTradeRejected = bool(v != 0)
		case 14:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VendorCommodityDispatched", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.VendorCommodityDispatched = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterTradePending", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterTradePending = bool(v != 0)
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterTradeAccepted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterTradeAccepted = bool(v != 0)
		case 17:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterTradeRejected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterTradeRejected = bool(v != 0)
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterVendorReached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterVendorReached = bool(v != 0)
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterCommodityCollected", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterCommodityCollected = bool(v != 0)
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterPurchaserReached", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterPurchaserReached = bool(v != 0)
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransporterCommodityDistributed", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.TransporterCommodityDistributed = bool(v != 0)
		case 22:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrade = fmt.Errorf("proto: unexpected end of group")
)
