// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logisticsbeta/logisticsbeta/vendor.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vendor struct {
	Vendorid   string `protobuf:"bytes,1,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
	Name       string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Commodity  string `protobuf:"bytes,3,opt,name=commodity,proto3" json:"commodity,omitempty"`
	Location   string `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
	WalletId   string `protobuf:"bytes,5,opt,name=walletId,proto3" json:"walletId,omitempty"`
	OffchainId string `protobuf:"bytes,6,opt,name=offchainId,proto3" json:"offchainId,omitempty"`
}

func (m *Vendor) Reset()         { *m = Vendor{} }
func (m *Vendor) String() string { return proto.CompactTextString(m) }
func (*Vendor) ProtoMessage()    {}
func (*Vendor) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9ed10c6cf49bcd0, []int{0}
}
func (m *Vendor) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vendor) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vendor.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vendor) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vendor.Merge(m, src)
}
func (m *Vendor) XXX_Size() int {
	return m.Size()
}
func (m *Vendor) XXX_DiscardUnknown() {
	xxx_messageInfo_Vendor.DiscardUnknown(m)
}

var xxx_messageInfo_Vendor proto.InternalMessageInfo

func (m *Vendor) GetVendorid() string {
	if m != nil {
		return m.Vendorid
	}
	return ""
}

func (m *Vendor) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Vendor) GetCommodity() string {
	if m != nil {
		return m.Commodity
	}
	return ""
}

func (m *Vendor) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func (m *Vendor) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *Vendor) GetOffchainId() string {
	if m != nil {
		return m.OffchainId
	}
	return ""
}

func init() {
	proto.RegisterType((*Vendor)(nil), "logisticsbeta.logisticsbeta.Vendor")
}

func init() {
	proto.RegisterFile("logisticsbeta/logisticsbeta/vendor.proto", fileDescriptor_e9ed10c6cf49bcd0)
}

var fileDescriptor_e9ed10c6cf49bcd0 = []byte{
	// 238 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xc8, 0xc9, 0x4f, 0xcf,
	0x2c, 0x2e, 0xc9, 0x4c, 0x2e, 0x4e, 0x4a, 0x2d, 0x49, 0xd4, 0x47, 0xe5, 0x95, 0xa5, 0xe6, 0xa5,
	0xe4, 0x17, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x49, 0xa3, 0xc8, 0xe9, 0xa1, 0xf0, 0x94,
	0xd6, 0x31, 0x72, 0xb1, 0x85, 0x81, 0x55, 0x0b, 0x49, 0x71, 0x71, 0x40, 0xf4, 0x65, 0xa6, 0x48,
	0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0xc1, 0xf9, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9,
	0x12, 0x4c, 0x60, 0x71, 0x30, 0x5b, 0x48, 0x86, 0x8b, 0x33, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x25,
	0xb3, 0xa4, 0x52, 0x82, 0x19, 0x2c, 0x81, 0x10, 0x00, 0x99, 0x96, 0x93, 0x9f, 0x9c, 0x58, 0x92,
	0x99, 0x9f, 0x27, 0xc1, 0x02, 0x31, 0x0d, 0xc6, 0x07, 0xc9, 0x95, 0x27, 0xe6, 0xe4, 0xa4, 0x96,
	0x78, 0xa6, 0x48, 0xb0, 0x42, 0xe4, 0x60, 0x7c, 0x21, 0x39, 0x2e, 0xae, 0xfc, 0xb4, 0xb4, 0xe4,
	0x8c, 0xc4, 0xcc, 0x3c, 0xcf, 0x14, 0x09, 0x36, 0xb0, 0x2c, 0x92, 0x88, 0x53, 0xe0, 0x89, 0x47,
	0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31, 0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0xc3, 0x85,
	0xc7, 0x72, 0x0c, 0x37, 0x1e, 0xcb, 0x31, 0x44, 0x99, 0xa7, 0x67, 0x96, 0x64, 0x94, 0x26, 0xe9,
	0x25, 0xe7, 0xe7, 0xea, 0x47, 0x54, 0x04, 0xfb, 0x65, 0x06, 0x54, 0x44, 0x20, 0xc2, 0xc5, 0x09,
	0x14, 0x2e, 0x15, 0x68, 0xe1, 0x54, 0x52, 0x59, 0x90, 0x5a, 0x9c, 0xc4, 0x06, 0x0e, 0x27, 0x63,
	0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xcb, 0x9f, 0x93, 0x70, 0x53, 0x01, 0x00, 0x00,
}

func (m *Vendor) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vendor) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vendor) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OffchainId) > 0 {
		i -= len(m.OffchainId)
		copy(dAtA[i:], m.OffchainId)
		i = encodeVarintVendor(dAtA, i, uint64(len(m.OffchainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintVendor(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Location) > 0 {
		i -= len(m.Location)
		copy(dAtA[i:], m.Location)
		i = encodeVarintVendor(dAtA, i, uint64(len(m.Location)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Commodity) > 0 {
		i -= len(m.Commodity)
		copy(dAtA[i:], m.Commodity)
		i = encodeVarintVendor(dAtA, i, uint64(len(m.Commodity)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintVendor(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vendorid) > 0 {
		i -= len(m.Vendorid)
		copy(dAtA[i:], m.Vendorid)
		i = encodeVarintVendor(dAtA, i, uint64(len(m.Vendorid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVendor(dAtA []byte, offset int, v uint64) int {
	offset -= sovVendor(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vendor) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vendorid)
	if l > 0 {
		n += 1 + l + sovVendor(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovVendor(uint64(l))
	}
	l = len(m.Commodity)
	if l > 0 {
		n += 1 + l + sovVendor(uint64(l))
	}
	l = len(m.Location)
	if l > 0 {
		n += 1 + l + sovVendor(uint64(l))
	}
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovVendor(uint64(l))
	}
	l = len(m.OffchainId)
	if l > 0 {
		n += 1 + l + sovVendor(uint64(l))
	}
	return n
}

func sovVendor(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVendor(x uint64) (n int) {
	return sovVendor(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vendor) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVendor
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vendor: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vendor: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendorid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVendor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVendor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendorid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVendor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVendor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commodity", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVendor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVendor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commodity = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVendor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVendor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Location = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVendor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVendor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffchainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVendor
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVendor
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffchainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVendor(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVendor
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVendor(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVendor
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVendor
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVendor
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVendor
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVendor
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVendor        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVendor          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVendor = fmt.Errorf("proto: unexpected end of group")
)
