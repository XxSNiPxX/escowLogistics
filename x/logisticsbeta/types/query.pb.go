// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logisticsbeta/logisticsbeta/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSystemInfo1Request struct {
}

func (m *QueryGetSystemInfo1Request) Reset()         { *m = QueryGetSystemInfo1Request{} }
func (m *QueryGetSystemInfo1Request) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo1Request) ProtoMessage()    {}
func (*QueryGetSystemInfo1Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{2}
}
func (m *QueryGetSystemInfo1Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo1Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo1Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo1Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo1Request.Merge(m, src)
}
func (m *QueryGetSystemInfo1Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo1Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo1Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo1Request proto.InternalMessageInfo

type QueryGetSystemInfo1Response struct {
	SystemInfo1 SystemInfo1 `protobuf:"bytes,1,opt,name=SystemInfo1,proto3" json:"SystemInfo1"`
}

func (m *QueryGetSystemInfo1Response) Reset()         { *m = QueryGetSystemInfo1Response{} }
func (m *QueryGetSystemInfo1Response) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo1Response) ProtoMessage()    {}
func (*QueryGetSystemInfo1Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{3}
}
func (m *QueryGetSystemInfo1Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo1Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo1Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo1Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo1Response.Merge(m, src)
}
func (m *QueryGetSystemInfo1Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo1Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo1Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo1Response proto.InternalMessageInfo

func (m *QueryGetSystemInfo1Response) GetSystemInfo1() SystemInfo1 {
	if m != nil {
		return m.SystemInfo1
	}
	return SystemInfo1{}
}

type QueryGetSystemInfo2Request struct {
}

func (m *QueryGetSystemInfo2Request) Reset()         { *m = QueryGetSystemInfo2Request{} }
func (m *QueryGetSystemInfo2Request) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo2Request) ProtoMessage()    {}
func (*QueryGetSystemInfo2Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{4}
}
func (m *QueryGetSystemInfo2Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo2Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo2Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo2Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo2Request.Merge(m, src)
}
func (m *QueryGetSystemInfo2Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo2Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo2Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo2Request proto.InternalMessageInfo

type QueryGetSystemInfo2Response struct {
	SystemInfo2 SystemInfo2 `protobuf:"bytes,1,opt,name=SystemInfo2,proto3" json:"SystemInfo2"`
}

func (m *QueryGetSystemInfo2Response) Reset()         { *m = QueryGetSystemInfo2Response{} }
func (m *QueryGetSystemInfo2Response) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo2Response) ProtoMessage()    {}
func (*QueryGetSystemInfo2Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{5}
}
func (m *QueryGetSystemInfo2Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo2Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo2Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo2Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo2Response.Merge(m, src)
}
func (m *QueryGetSystemInfo2Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo2Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo2Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo2Response proto.InternalMessageInfo

func (m *QueryGetSystemInfo2Response) GetSystemInfo2() SystemInfo2 {
	if m != nil {
		return m.SystemInfo2
	}
	return SystemInfo2{}
}

type QueryGetSystemInfo3Request struct {
}

func (m *QueryGetSystemInfo3Request) Reset()         { *m = QueryGetSystemInfo3Request{} }
func (m *QueryGetSystemInfo3Request) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo3Request) ProtoMessage()    {}
func (*QueryGetSystemInfo3Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{6}
}
func (m *QueryGetSystemInfo3Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo3Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo3Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo3Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo3Request.Merge(m, src)
}
func (m *QueryGetSystemInfo3Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo3Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo3Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo3Request proto.InternalMessageInfo

type QueryGetSystemInfo3Response struct {
	SystemInfo3 SystemInfo3 `protobuf:"bytes,1,opt,name=SystemInfo3,proto3" json:"SystemInfo3"`
}

func (m *QueryGetSystemInfo3Response) Reset()         { *m = QueryGetSystemInfo3Response{} }
func (m *QueryGetSystemInfo3Response) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo3Response) ProtoMessage()    {}
func (*QueryGetSystemInfo3Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{7}
}
func (m *QueryGetSystemInfo3Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo3Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo3Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo3Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo3Response.Merge(m, src)
}
func (m *QueryGetSystemInfo3Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo3Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo3Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo3Response proto.InternalMessageInfo

func (m *QueryGetSystemInfo3Response) GetSystemInfo3() SystemInfo3 {
	if m != nil {
		return m.SystemInfo3
	}
	return SystemInfo3{}
}

type QueryGetVendorRequest struct {
	Vendorid string `protobuf:"bytes,1,opt,name=vendorid,proto3" json:"vendorid,omitempty"`
}

func (m *QueryGetVendorRequest) Reset()         { *m = QueryGetVendorRequest{} }
func (m *QueryGetVendorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetVendorRequest) ProtoMessage()    {}
func (*QueryGetVendorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{8}
}
func (m *QueryGetVendorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVendorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVendorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVendorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVendorRequest.Merge(m, src)
}
func (m *QueryGetVendorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVendorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVendorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVendorRequest proto.InternalMessageInfo

func (m *QueryGetVendorRequest) GetVendorid() string {
	if m != nil {
		return m.Vendorid
	}
	return ""
}

type QueryGetVendorResponse struct {
	Vendor Vendor `protobuf:"bytes,1,opt,name=vendor,proto3" json:"vendor"`
}

func (m *QueryGetVendorResponse) Reset()         { *m = QueryGetVendorResponse{} }
func (m *QueryGetVendorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetVendorResponse) ProtoMessage()    {}
func (*QueryGetVendorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{9}
}
func (m *QueryGetVendorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetVendorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetVendorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetVendorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetVendorResponse.Merge(m, src)
}
func (m *QueryGetVendorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetVendorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetVendorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetVendorResponse proto.InternalMessageInfo

func (m *QueryGetVendorResponse) GetVendor() Vendor {
	if m != nil {
		return m.Vendor
	}
	return Vendor{}
}

type QueryAllVendorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVendorRequest) Reset()         { *m = QueryAllVendorRequest{} }
func (m *QueryAllVendorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllVendorRequest) ProtoMessage()    {}
func (*QueryAllVendorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{10}
}
func (m *QueryAllVendorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVendorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVendorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVendorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVendorRequest.Merge(m, src)
}
func (m *QueryAllVendorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVendorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVendorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVendorRequest proto.InternalMessageInfo

func (m *QueryAllVendorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllVendorResponse struct {
	Vendor     []Vendor            `protobuf:"bytes,1,rep,name=vendor,proto3" json:"vendor"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllVendorResponse) Reset()         { *m = QueryAllVendorResponse{} }
func (m *QueryAllVendorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllVendorResponse) ProtoMessage()    {}
func (*QueryAllVendorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{11}
}
func (m *QueryAllVendorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllVendorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllVendorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllVendorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllVendorResponse.Merge(m, src)
}
func (m *QueryAllVendorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllVendorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllVendorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllVendorResponse proto.InternalMessageInfo

func (m *QueryAllVendorResponse) GetVendor() []Vendor {
	if m != nil {
		return m.Vendor
	}
	return nil
}

func (m *QueryAllVendorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetPurchaserRequest struct {
	Purchaserid string `protobuf:"bytes,1,opt,name=purchaserid,proto3" json:"purchaserid,omitempty"`
}

func (m *QueryGetPurchaserRequest) Reset()         { *m = QueryGetPurchaserRequest{} }
func (m *QueryGetPurchaserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetPurchaserRequest) ProtoMessage()    {}
func (*QueryGetPurchaserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{12}
}
func (m *QueryGetPurchaserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPurchaserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPurchaserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPurchaserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPurchaserRequest.Merge(m, src)
}
func (m *QueryGetPurchaserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPurchaserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPurchaserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPurchaserRequest proto.InternalMessageInfo

func (m *QueryGetPurchaserRequest) GetPurchaserid() string {
	if m != nil {
		return m.Purchaserid
	}
	return ""
}

type QueryGetPurchaserResponse struct {
	Purchaser Purchaser `protobuf:"bytes,1,opt,name=purchaser,proto3" json:"purchaser"`
}

func (m *QueryGetPurchaserResponse) Reset()         { *m = QueryGetPurchaserResponse{} }
func (m *QueryGetPurchaserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetPurchaserResponse) ProtoMessage()    {}
func (*QueryGetPurchaserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{13}
}
func (m *QueryGetPurchaserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetPurchaserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetPurchaserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetPurchaserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetPurchaserResponse.Merge(m, src)
}
func (m *QueryGetPurchaserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetPurchaserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetPurchaserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetPurchaserResponse proto.InternalMessageInfo

func (m *QueryGetPurchaserResponse) GetPurchaser() Purchaser {
	if m != nil {
		return m.Purchaser
	}
	return Purchaser{}
}

type QueryAllPurchaserRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaserRequest) Reset()         { *m = QueryAllPurchaserRequest{} }
func (m *QueryAllPurchaserRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaserRequest) ProtoMessage()    {}
func (*QueryAllPurchaserRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{14}
}
func (m *QueryAllPurchaserRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaserRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaserRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaserRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaserRequest.Merge(m, src)
}
func (m *QueryAllPurchaserRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaserRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaserRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaserRequest proto.InternalMessageInfo

func (m *QueryAllPurchaserRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllPurchaserResponse struct {
	Purchaser  []Purchaser         `protobuf:"bytes,1,rep,name=purchaser,proto3" json:"purchaser"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllPurchaserResponse) Reset()         { *m = QueryAllPurchaserResponse{} }
func (m *QueryAllPurchaserResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPurchaserResponse) ProtoMessage()    {}
func (*QueryAllPurchaserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{15}
}
func (m *QueryAllPurchaserResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPurchaserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPurchaserResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPurchaserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPurchaserResponse.Merge(m, src)
}
func (m *QueryAllPurchaserResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPurchaserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPurchaserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPurchaserResponse proto.InternalMessageInfo

func (m *QueryAllPurchaserResponse) GetPurchaser() []Purchaser {
	if m != nil {
		return m.Purchaser
	}
	return nil
}

func (m *QueryAllPurchaserResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetTransporterRequest struct {
	Transporterid string `protobuf:"bytes,1,opt,name=transporterid,proto3" json:"transporterid,omitempty"`
}

func (m *QueryGetTransporterRequest) Reset()         { *m = QueryGetTransporterRequest{} }
func (m *QueryGetTransporterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransporterRequest) ProtoMessage()    {}
func (*QueryGetTransporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{16}
}
func (m *QueryGetTransporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransporterRequest.Merge(m, src)
}
func (m *QueryGetTransporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransporterRequest proto.InternalMessageInfo

func (m *QueryGetTransporterRequest) GetTransporterid() string {
	if m != nil {
		return m.Transporterid
	}
	return ""
}

type QueryGetTransporterResponse struct {
	Transporter Transporter `protobuf:"bytes,1,opt,name=transporter,proto3" json:"transporter"`
}

func (m *QueryGetTransporterResponse) Reset()         { *m = QueryGetTransporterResponse{} }
func (m *QueryGetTransporterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTransporterResponse) ProtoMessage()    {}
func (*QueryGetTransporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{17}
}
func (m *QueryGetTransporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTransporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTransporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTransporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTransporterResponse.Merge(m, src)
}
func (m *QueryGetTransporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTransporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTransporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTransporterResponse proto.InternalMessageInfo

func (m *QueryGetTransporterResponse) GetTransporter() Transporter {
	if m != nil {
		return m.Transporter
	}
	return Transporter{}
}

type QueryAllTransporterRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTransporterRequest) Reset()         { *m = QueryAllTransporterRequest{} }
func (m *QueryAllTransporterRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTransporterRequest) ProtoMessage()    {}
func (*QueryAllTransporterRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{18}
}
func (m *QueryAllTransporterRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTransporterRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTransporterRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTransporterRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTransporterRequest.Merge(m, src)
}
func (m *QueryAllTransporterRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTransporterRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTransporterRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTransporterRequest proto.InternalMessageInfo

func (m *QueryAllTransporterRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTransporterResponse struct {
	Transporter []Transporter       `protobuf:"bytes,1,rep,name=transporter,proto3" json:"transporter"`
	Pagination  *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTransporterResponse) Reset()         { *m = QueryAllTransporterResponse{} }
func (m *QueryAllTransporterResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTransporterResponse) ProtoMessage()    {}
func (*QueryAllTransporterResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{19}
}
func (m *QueryAllTransporterResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTransporterResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTransporterResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTransporterResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTransporterResponse.Merge(m, src)
}
func (m *QueryAllTransporterResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTransporterResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTransporterResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTransporterResponse proto.InternalMessageInfo

func (m *QueryAllTransporterResponse) GetTransporter() []Transporter {
	if m != nil {
		return m.Transporter
	}
	return nil
}

func (m *QueryAllTransporterResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetSystemInfo4Request struct {
}

func (m *QueryGetSystemInfo4Request) Reset()         { *m = QueryGetSystemInfo4Request{} }
func (m *QueryGetSystemInfo4Request) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo4Request) ProtoMessage()    {}
func (*QueryGetSystemInfo4Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{20}
}
func (m *QueryGetSystemInfo4Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo4Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo4Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo4Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo4Request.Merge(m, src)
}
func (m *QueryGetSystemInfo4Request) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo4Request) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo4Request.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo4Request proto.InternalMessageInfo

type QueryGetSystemInfo4Response struct {
	SystemInfo4 SystemInfo4 `protobuf:"bytes,1,opt,name=SystemInfo4,proto3" json:"SystemInfo4"`
}

func (m *QueryGetSystemInfo4Response) Reset()         { *m = QueryGetSystemInfo4Response{} }
func (m *QueryGetSystemInfo4Response) String() string { return proto.CompactTextString(m) }
func (*QueryGetSystemInfo4Response) ProtoMessage()    {}
func (*QueryGetSystemInfo4Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{21}
}
func (m *QueryGetSystemInfo4Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSystemInfo4Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSystemInfo4Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSystemInfo4Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSystemInfo4Response.Merge(m, src)
}
func (m *QueryGetSystemInfo4Response) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSystemInfo4Response) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSystemInfo4Response.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSystemInfo4Response proto.InternalMessageInfo

func (m *QueryGetSystemInfo4Response) GetSystemInfo4() SystemInfo4 {
	if m != nil {
		return m.SystemInfo4
	}
	return SystemInfo4{}
}

type QueryGetTradeRequest struct {
	Tradeid string `protobuf:"bytes,1,opt,name=tradeid,proto3" json:"tradeid,omitempty"`
}

func (m *QueryGetTradeRequest) Reset()         { *m = QueryGetTradeRequest{} }
func (m *QueryGetTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeRequest) ProtoMessage()    {}
func (*QueryGetTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{22}
}
func (m *QueryGetTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeRequest.Merge(m, src)
}
func (m *QueryGetTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeRequest proto.InternalMessageInfo

func (m *QueryGetTradeRequest) GetTradeid() string {
	if m != nil {
		return m.Tradeid
	}
	return ""
}

type QueryGetTradeResponse struct {
	Trade Trade `protobuf:"bytes,1,opt,name=trade,proto3" json:"trade"`
}

func (m *QueryGetTradeResponse) Reset()         { *m = QueryGetTradeResponse{} }
func (m *QueryGetTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetTradeResponse) ProtoMessage()    {}
func (*QueryGetTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{23}
}
func (m *QueryGetTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetTradeResponse.Merge(m, src)
}
func (m *QueryGetTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetTradeResponse proto.InternalMessageInfo

func (m *QueryGetTradeResponse) GetTrade() Trade {
	if m != nil {
		return m.Trade
	}
	return Trade{}
}

type QueryAllTradeRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradeRequest) Reset()         { *m = QueryAllTradeRequest{} }
func (m *QueryAllTradeRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradeRequest) ProtoMessage()    {}
func (*QueryAllTradeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{24}
}
func (m *QueryAllTradeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradeRequest.Merge(m, src)
}
func (m *QueryAllTradeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradeRequest proto.InternalMessageInfo

func (m *QueryAllTradeRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllTradeResponse struct {
	Trade      []Trade             `protobuf:"bytes,1,rep,name=trade,proto3" json:"trade"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllTradeResponse) Reset()         { *m = QueryAllTradeResponse{} }
func (m *QueryAllTradeResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllTradeResponse) ProtoMessage()    {}
func (*QueryAllTradeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f87523d504a4b4d7, []int{25}
}
func (m *QueryAllTradeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllTradeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllTradeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllTradeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllTradeResponse.Merge(m, src)
}
func (m *QueryAllTradeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllTradeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllTradeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllTradeResponse proto.InternalMessageInfo

func (m *QueryAllTradeResponse) GetTrade() []Trade {
	if m != nil {
		return m.Trade
	}
	return nil
}

func (m *QueryAllTradeResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "logisticsbeta.logisticsbeta.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "logisticsbeta.logisticsbeta.QueryParamsResponse")
	proto.RegisterType((*QueryGetSystemInfo1Request)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo1Request")
	proto.RegisterType((*QueryGetSystemInfo1Response)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo1Response")
	proto.RegisterType((*QueryGetSystemInfo2Request)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo2Request")
	proto.RegisterType((*QueryGetSystemInfo2Response)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo2Response")
	proto.RegisterType((*QueryGetSystemInfo3Request)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo3Request")
	proto.RegisterType((*QueryGetSystemInfo3Response)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo3Response")
	proto.RegisterType((*QueryGetVendorRequest)(nil), "logisticsbeta.logisticsbeta.QueryGetVendorRequest")
	proto.RegisterType((*QueryGetVendorResponse)(nil), "logisticsbeta.logisticsbeta.QueryGetVendorResponse")
	proto.RegisterType((*QueryAllVendorRequest)(nil), "logisticsbeta.logisticsbeta.QueryAllVendorRequest")
	proto.RegisterType((*QueryAllVendorResponse)(nil), "logisticsbeta.logisticsbeta.QueryAllVendorResponse")
	proto.RegisterType((*QueryGetPurchaserRequest)(nil), "logisticsbeta.logisticsbeta.QueryGetPurchaserRequest")
	proto.RegisterType((*QueryGetPurchaserResponse)(nil), "logisticsbeta.logisticsbeta.QueryGetPurchaserResponse")
	proto.RegisterType((*QueryAllPurchaserRequest)(nil), "logisticsbeta.logisticsbeta.QueryAllPurchaserRequest")
	proto.RegisterType((*QueryAllPurchaserResponse)(nil), "logisticsbeta.logisticsbeta.QueryAllPurchaserResponse")
	proto.RegisterType((*QueryGetTransporterRequest)(nil), "logisticsbeta.logisticsbeta.QueryGetTransporterRequest")
	proto.RegisterType((*QueryGetTransporterResponse)(nil), "logisticsbeta.logisticsbeta.QueryGetTransporterResponse")
	proto.RegisterType((*QueryAllTransporterRequest)(nil), "logisticsbeta.logisticsbeta.QueryAllTransporterRequest")
	proto.RegisterType((*QueryAllTransporterResponse)(nil), "logisticsbeta.logisticsbeta.QueryAllTransporterResponse")
	proto.RegisterType((*QueryGetSystemInfo4Request)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo4Request")
	proto.RegisterType((*QueryGetSystemInfo4Response)(nil), "logisticsbeta.logisticsbeta.QueryGetSystemInfo4Response")
	proto.RegisterType((*QueryGetTradeRequest)(nil), "logisticsbeta.logisticsbeta.QueryGetTradeRequest")
	proto.RegisterType((*QueryGetTradeResponse)(nil), "logisticsbeta.logisticsbeta.QueryGetTradeResponse")
	proto.RegisterType((*QueryAllTradeRequest)(nil), "logisticsbeta.logisticsbeta.QueryAllTradeRequest")
	proto.RegisterType((*QueryAllTradeResponse)(nil), "logisticsbeta.logisticsbeta.QueryAllTradeResponse")
}

func init() {
	proto.RegisterFile("logisticsbeta/logisticsbeta/query.proto", fileDescriptor_f87523d504a4b4d7)
}

var fileDescriptor_f87523d504a4b4d7 = []byte{
	// 1117 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x98, 0xcf, 0x8b, 0x1c, 0x45,
	0x14, 0xc7, 0xb7, 0xb2, 0xee, 0x98, 0xa9, 0x55, 0xc1, 0x72, 0x95, 0xb5, 0x13, 0xc6, 0x50, 0x8a,
	0xbb, 0x24, 0xa6, 0x3b, 0xd3, 0xdd, 0xeb, 0x18, 0x34, 0x86, 0x19, 0x31, 0x21, 0x1e, 0x64, 0x32,
	0x11, 0x0d, 0x8a, 0x2e, 0x3d, 0x3b, 0x9d, 0x4e, 0x43, 0x4f, 0xd7, 0x64, 0xba, 0x37, 0xec, 0xb2,
	0xec, 0xc5, 0xbf, 0x40, 0xf0, 0x1f, 0x50, 0x10, 0x11, 0x41, 0x08, 0x1e, 0xc4, 0x8b, 0x82, 0xb7,
	0x80, 0x97, 0x80, 0x17, 0x4f, 0x22, 0xbb, 0x82, 0x77, 0xff, 0x02, 0xe9, 0xaa, 0xea, 0x9f, 0xd3,
	0xdb, 0x53, 0x35, 0xe9, 0x4b, 0x98, 0xee, 0x79, 0xef, 0xd5, 0xe7, 0xd5, 0xab, 0xfa, 0xce, 0x37,
	0x0b, 0x37, 0x3c, 0xe2, 0xb8, 0x41, 0xe8, 0xee, 0x04, 0x43, 0x3b, 0xb4, 0xb4, 0xfc, 0xd3, 0xbd,
	0x5d, 0x7b, 0xba, 0xaf, 0x4e, 0xa6, 0x24, 0x24, 0xe8, 0x4c, 0xee, 0x2b, 0x35, 0xf7, 0xa4, 0x3c,
	0x6b, 0x8d, 0x5d, 0x9f, 0x68, 0xf4, 0x5f, 0x16, 0xaf, 0xac, 0x39, 0xc4, 0x21, 0xf4, 0xa3, 0x16,
	0x7d, 0xe2, 0x6f, 0xcf, 0x3a, 0x84, 0x38, 0x9e, 0xad, 0x59, 0x13, 0x57, 0xb3, 0x7c, 0x9f, 0x84,
	0x56, 0xe8, 0x12, 0x3f, 0xe0, 0xdf, 0x9e, 0xdf, 0x21, 0xc1, 0x98, 0x04, 0xda, 0xd0, 0x0a, 0x6c,
	0xb6, 0xb8, 0x76, 0xbf, 0x1d, 0x2d, 0xd0, 0xd6, 0x26, 0x96, 0xe3, 0xfa, 0x34, 0x98, 0xc7, 0x6e,
	0x56, 0x81, 0x4f, 0xac, 0xa9, 0x35, 0x8e, 0xab, 0x6a, 0x55, 0x91, 0xc1, 0x7e, 0x10, 0xda, 0xe3,
	0x6d, 0xd7, 0xbf, 0x43, 0xb6, 0xdb, 0xb2, 0x09, 0xba, 0x6c, 0x82, 0x21, 0x02, 0x7f, 0xdf, 0xf6,
	0x47, 0x64, 0xca, 0x23, 0x2f, 0x54, 0xb6, 0xb9, 0x3b, 0xdd, 0xb9, 0x6b, 0x05, 0x76, 0x1c, 0x7c,
	0xb1, 0x2a, 0x38, 0x9c, 0x5a, 0x7e, 0x30, 0x21, 0xd3, 0x30, 0x09, 0x17, 0xc6, 0x36, 0x79, 0xc2,
	0xc6, 0x9c, 0xfa, 0x23, 0x9b, 0x05, 0xe2, 0x35, 0x88, 0x6e, 0x46, 0xe3, 0xeb, 0xd3, 0x39, 0x0c,
	0xec, 0x7b, 0xbb, 0x76, 0x10, 0xe2, 0x4f, 0xe1, 0x73, 0xb9, 0xb7, 0xc1, 0x84, 0xf8, 0x81, 0x8d,
	0xae, 0xc1, 0x06, 0x9b, 0xd7, 0x3a, 0x38, 0x07, 0x36, 0x57, 0xf5, 0x97, 0xd5, 0x8a, 0xa3, 0xa6,
	0xb2, 0xe4, 0x5e, 0xf3, 0xe1, 0x5f, 0x2f, 0x2d, 0x7d, 0xf7, 0xef, 0x83, 0xf3, 0x60, 0xc0, 0xb3,
	0xf1, 0x59, 0xa8, 0xd0, 0xf2, 0xd7, 0xed, 0xf0, 0x16, 0x85, 0xbf, 0xe1, 0xdf, 0x21, 0xed, 0x78,
	0x71, 0x02, 0xcf, 0x94, 0x7e, 0xcb, 0x21, 0xfa, 0x70, 0x35, 0xf3, 0x9a, 0x93, 0x6c, 0x56, 0x92,
	0x64, 0xe2, 0x7b, 0x4f, 0x44, 0x38, 0x83, 0x6c, 0x89, 0x72, 0x1c, 0xbd, 0x12, 0x47, 0x2f, 0xc7,
	0xd1, 0x25, 0x71, 0xf4, 0x59, 0x1c, 0xbd, 0x1c, 0xc7, 0xa8, 0xc4, 0x31, 0xca, 0x71, 0x0c, 0x49,
	0x1c, 0x63, 0x16, 0xc7, 0xc0, 0x06, 0x7c, 0x3e, 0x5e, 0xf0, 0x43, 0x7a, 0xde, 0x39, 0x09, 0x52,
	0xe0, 0x69, 0x76, 0x01, 0xdc, 0x11, 0x5d, 0xa7, 0x39, 0x48, 0x9e, 0xf1, 0x27, 0xf0, 0x85, 0x62,
	0x12, 0x07, 0xec, 0xc2, 0x06, 0x8b, 0x12, 0x3a, 0x43, 0x2c, 0x99, 0x63, 0xf1, 0x44, 0xbc, 0xcd,
	0x89, 0xba, 0x9e, 0x97, 0x27, 0xba, 0x06, 0x61, 0xaa, 0x3e, 0xbc, 0xfe, 0xab, 0x2a, 0x93, 0x2a,
	0x35, 0x92, 0x2a, 0x95, 0xe9, 0x24, 0x97, 0x2a, 0xb5, 0x6f, 0x39, 0x36, 0xcf, 0x1d, 0x64, 0x32,
	0xf1, 0x37, 0x80, 0xe3, 0x67, 0x56, 0x28, 0xc1, 0x5f, 0x5e, 0x08, 0x1f, 0x5d, 0xcf, 0x51, 0x9e,
	0xa2, 0x94, 0x1b, 0x73, 0x29, 0xd9, 0xfa, 0x39, 0xcc, 0xb7, 0xe0, 0x7a, 0xbc, 0xc9, 0xfd, 0x58,
	0x5f, 0xe2, 0xad, 0x38, 0x07, 0x57, 0x13, 0xcd, 0x49, 0xe6, 0x93, 0x7d, 0x85, 0x1d, 0xf8, 0x62,
	0x49, 0x36, 0x6f, 0xf3, 0x3d, 0xd8, 0x4c, 0x62, 0x93, 0x8d, 0xac, 0xbc, 0xec, 0x71, 0x34, 0x6f,
	0x36, 0x4d, 0xc7, 0x43, 0x8e, 0xd9, 0xf5, 0xbc, 0x19, 0xcc, 0xba, 0x26, 0xf6, 0x00, 0xf0, 0x6e,
	0xf2, 0x8b, 0x94, 0x77, 0xb3, 0xfc, 0x18, 0xdd, 0xd4, 0x37, 0xbd, 0x5e, 0x7a, 0xcd, 0x3f, 0x48,
	0x05, 0x3f, 0xde, 0x98, 0x57, 0xe0, 0xd3, 0x99, 0x9f, 0x81, 0x64, 0x82, 0xf9, 0x97, 0x59, 0x31,
	0xc8, 0xd5, 0x48, 0xc5, 0x20, 0x13, 0x2f, 0x24, 0x06, 0x99, 0x32, 0xb1, 0x18, 0x64, 0x4a, 0xe0,
	0x11, 0x87, 0xee, 0x7a, 0x5e, 0x09, 0x74, 0x5d, 0xd3, 0xfc, 0x19, 0xf0, 0xbe, 0x8a, 0xcb, 0x9c,
	0xd4, 0xd7, 0xf2, 0x63, 0xf6, 0x55, 0xdf, 0x54, 0x4b, 0xc5, 0xdb, 0xac, 0x14, 0x6f, 0xb3, 0x5c,
	0xbc, 0x4d, 0x49, 0xf1, 0x36, 0x67, 0xc5, 0xdb, 0xc4, 0x97, 0xe0, 0x5a, 0xe6, 0x80, 0x8c, 0xe2,
	0xdd, 0x46, 0xeb, 0xf0, 0x49, 0xea, 0x02, 0x92, 0x83, 0x15, 0x3f, 0xe2, 0x8f, 0x52, 0xb9, 0xe7,
	0x19, 0x1c, 0xee, 0x6d, 0xb8, 0x42, 0x63, 0x38, 0x16, 0x9e, 0xb7, 0xdd, 0x23, 0x9b, 0x03, 0xb1,
	0x34, 0xfc, 0x19, 0x47, 0x61, 0x33, 0x4d, 0x51, 0xea, 0x3a, 0x34, 0x5f, 0x81, 0xf4, 0x67, 0xe1,
	0x44, 0xf2, 0xe5, 0x05, 0xc8, 0x6b, 0x3b, 0x1c, 0xfa, 0x7f, 0x08, 0xae, 0x50, 0x44, 0xf4, 0x35,
	0x80, 0x0d, 0xe6, 0x8f, 0x90, 0x56, 0x89, 0x33, 0x6b, 0xce, 0x94, 0x4b, 0xe2, 0x09, 0x8c, 0x01,
	0x9b, 0x9f, 0xff, 0xf1, 0xcf, 0x97, 0xa7, 0x54, 0xf4, 0x9a, 0x76, 0x7b, 0xef, 0xd6, 0xfb, 0x6e,
	0x7f, 0xef, 0x76, 0xea, 0x08, 0x7b, 0x27, 0x79, 0x72, 0xf4, 0x0b, 0xc8, 0x39, 0x2d, 0xd4, 0x99,
	0xbf, 0x6e, 0xa9, 0xa1, 0x53, 0xde, 0x90, 0x4f, 0xe4, 0xe0, 0x6f, 0x52, 0xf0, 0x2d, 0x64, 0x88,
	0x81, 0xe7, 0xfe, 0x8b, 0x50, 0xe0, 0xd7, 0xa5, 0xf9, 0xf5, 0x45, 0xf9, 0xf5, 0x3a, 0xf8, 0xf5,
	0x02, 0xbf, 0x21, 0xcd, 0x6f, 0x2c, 0xca, 0x6f, 0xd4, 0xc1, 0x6f, 0xa0, 0x1f, 0x01, 0x6c, 0x30,
	0x03, 0x84, 0x74, 0x21, 0x82, 0x9c, 0x99, 0x53, 0x0c, 0xa9, 0x1c, 0x0e, 0x7c, 0x95, 0x02, 0x5f,
	0x46, 0x1d, 0x31, 0x60, 0xe6, 0xc8, 0xb4, 0x83, 0xd8, 0xb7, 0x1e, 0xa2, 0xef, 0x01, 0x6c, 0xb2,
	0x9a, 0x5d, 0xcf, 0x13, 0xe1, 0x2e, 0x9a, 0x50, 0x11, 0xee, 0x19, 0x5b, 0x29, 0x7b, 0x43, 0xb9,
	0x93, 0xfc, 0x0d, 0xc0, 0x66, 0x62, 0x55, 0xd0, 0x96, 0xd0, 0x86, 0x15, 0x2d, 0x98, 0xf2, 0xba,
	0x6c, 0x1a, 0x47, 0x7e, 0x97, 0x22, 0x5f, 0x45, 0x57, 0x04, 0x45, 0x25, 0x2e, 0xa0, 0x1d, 0x64,
	0x5c, 0xe8, 0x21, 0xfa, 0x09, 0xc0, 0xa7, 0x92, 0xe2, 0xd1, 0x9e, 0x6f, 0x09, 0xed, 0xdf, 0x22,
	0x6d, 0x94, 0x79, 0x43, 0xdc, 0xa1, 0x6d, 0xb4, 0x91, 0x26, 0xd9, 0x06, 0xfa, 0x1d, 0xc0, 0xd5,
	0x8c, 0xab, 0x10, 0xbc, 0x9e, 0xb3, 0xae, 0x49, 0xf0, 0x7a, 0x96, 0xf8, 0x20, 0x7c, 0x83, 0xb2,
	0xbf, 0x83, 0xba, 0x62, 0xec, 0x19, 0xc3, 0xa3, 0x1d, 0xe4, 0x8c, 0xe4, 0x21, 0xfa, 0x15, 0xc0,
	0x67, 0x32, 0x4b, 0x44, 0x83, 0xe8, 0x08, 0xed, 0xe8, 0x62, 0x0d, 0x95, 0x1b, 0x3b, 0x7c, 0x99,
	0x36, 0x64, 0xa0, 0xb6, 0x74, 0x43, 0x05, 0xb5, 0x34, 0xa5, 0xd5, 0xd2, 0x5c, 0x54, 0x2d, 0xcd,
	0x3a, 0xd4, 0xd2, 0x44, 0x3f, 0x00, 0xb8, 0x42, 0xbd, 0x07, 0x6a, 0x8b, 0x9e, 0x87, 0xc4, 0x43,
	0x29, 0xba, 0x4c, 0x0a, 0xa7, 0xbd, 0x42, 0x69, 0x3b, 0x68, 0x4b, 0x78, 0xaf, 0x47, 0x36, 0x3d,
	0x36, 0x91, 0x4d, 0x3c, 0x44, 0xdf, 0x02, 0x78, 0x9a, 0x16, 0x8c, 0x8e, 0x4a, 0x5b, 0x74, 0xe2,
	0x52, 0xc8, 0x45, 0x23, 0x87, 0x0d, 0x8a, 0x7c, 0x11, 0x5d, 0x90, 0x40, 0xee, 0xdd, 0x7c, 0x78,
	0xd4, 0x02, 0x8f, 0x8e, 0x5a, 0xe0, 0xef, 0xa3, 0x16, 0xf8, 0xe2, 0xb8, 0xb5, 0xf4, 0xe8, 0xb8,
	0xb5, 0xf4, 0xe7, 0x71, 0x6b, 0xe9, 0xe3, 0x8e, 0xe3, 0x86, 0x77, 0x77, 0x87, 0xea, 0x0e, 0x19,
	0x9f, 0x54, 0x70, 0xaf, 0x58, 0x72, 0x7f, 0x62, 0x07, 0xc3, 0x06, 0xfd, 0xdb, 0x99, 0xf1, 0x7f,
	0x00, 0x00, 0x00, 0xff, 0xff, 0x7e, 0xae, 0x89, 0x51, 0x93, 0x15, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a SystemInfo1 by index.
	SystemInfo1(ctx context.Context, in *QueryGetSystemInfo1Request, opts ...grpc.CallOption) (*QueryGetSystemInfo1Response, error)
	// Queries a SystemInfo2 by index.
	SystemInfo2(ctx context.Context, in *QueryGetSystemInfo2Request, opts ...grpc.CallOption) (*QueryGetSystemInfo2Response, error)
	// Queries a SystemInfo3 by index.
	SystemInfo3(ctx context.Context, in *QueryGetSystemInfo3Request, opts ...grpc.CallOption) (*QueryGetSystemInfo3Response, error)
	// Queries a list of Vendor items.
	Vendor(ctx context.Context, in *QueryGetVendorRequest, opts ...grpc.CallOption) (*QueryGetVendorResponse, error)
	VendorAll(ctx context.Context, in *QueryAllVendorRequest, opts ...grpc.CallOption) (*QueryAllVendorResponse, error)
	// Queries a list of Purchaser items.
	Purchaser(ctx context.Context, in *QueryGetPurchaserRequest, opts ...grpc.CallOption) (*QueryGetPurchaserResponse, error)
	PurchaserAll(ctx context.Context, in *QueryAllPurchaserRequest, opts ...grpc.CallOption) (*QueryAllPurchaserResponse, error)
	// Queries a list of Transporter items.
	Transporter(ctx context.Context, in *QueryGetTransporterRequest, opts ...grpc.CallOption) (*QueryGetTransporterResponse, error)
	TransporterAll(ctx context.Context, in *QueryAllTransporterRequest, opts ...grpc.CallOption) (*QueryAllTransporterResponse, error)
	// Queries a SystemInfo4 by index.
	SystemInfo4(ctx context.Context, in *QueryGetSystemInfo4Request, opts ...grpc.CallOption) (*QueryGetSystemInfo4Response, error)
	// Queries a list of Trade items.
	Trade(ctx context.Context, in *QueryGetTradeRequest, opts ...grpc.CallOption) (*QueryGetTradeResponse, error)
	TradeAll(ctx context.Context, in *QueryAllTradeRequest, opts ...grpc.CallOption) (*QueryAllTradeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemInfo1(ctx context.Context, in *QueryGetSystemInfo1Request, opts ...grpc.CallOption) (*QueryGetSystemInfo1Response, error) {
	out := new(QueryGetSystemInfo1Response)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/SystemInfo1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemInfo2(ctx context.Context, in *QueryGetSystemInfo2Request, opts ...grpc.CallOption) (*QueryGetSystemInfo2Response, error) {
	out := new(QueryGetSystemInfo2Response)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/SystemInfo2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemInfo3(ctx context.Context, in *QueryGetSystemInfo3Request, opts ...grpc.CallOption) (*QueryGetSystemInfo3Response, error) {
	out := new(QueryGetSystemInfo3Response)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/SystemInfo3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Vendor(ctx context.Context, in *QueryGetVendorRequest, opts ...grpc.CallOption) (*QueryGetVendorResponse, error) {
	out := new(QueryGetVendorResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/Vendor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VendorAll(ctx context.Context, in *QueryAllVendorRequest, opts ...grpc.CallOption) (*QueryAllVendorResponse, error) {
	out := new(QueryAllVendorResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/VendorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Purchaser(ctx context.Context, in *QueryGetPurchaserRequest, opts ...grpc.CallOption) (*QueryGetPurchaserResponse, error) {
	out := new(QueryGetPurchaserResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/Purchaser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PurchaserAll(ctx context.Context, in *QueryAllPurchaserRequest, opts ...grpc.CallOption) (*QueryAllPurchaserResponse, error) {
	out := new(QueryAllPurchaserResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/PurchaserAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Transporter(ctx context.Context, in *QueryGetTransporterRequest, opts ...grpc.CallOption) (*QueryGetTransporterResponse, error) {
	out := new(QueryGetTransporterResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/Transporter", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TransporterAll(ctx context.Context, in *QueryAllTransporterRequest, opts ...grpc.CallOption) (*QueryAllTransporterResponse, error) {
	out := new(QueryAllTransporterResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/TransporterAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SystemInfo4(ctx context.Context, in *QueryGetSystemInfo4Request, opts ...grpc.CallOption) (*QueryGetSystemInfo4Response, error) {
	out := new(QueryGetSystemInfo4Response)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/SystemInfo4", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Trade(ctx context.Context, in *QueryGetTradeRequest, opts ...grpc.CallOption) (*QueryGetTradeResponse, error) {
	out := new(QueryGetTradeResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/Trade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) TradeAll(ctx context.Context, in *QueryAllTradeRequest, opts ...grpc.CallOption) (*QueryAllTradeResponse, error) {
	out := new(QueryAllTradeResponse)
	err := c.cc.Invoke(ctx, "/logisticsbeta.logisticsbeta.Query/TradeAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a SystemInfo1 by index.
	SystemInfo1(context.Context, *QueryGetSystemInfo1Request) (*QueryGetSystemInfo1Response, error)
	// Queries a SystemInfo2 by index.
	SystemInfo2(context.Context, *QueryGetSystemInfo2Request) (*QueryGetSystemInfo2Response, error)
	// Queries a SystemInfo3 by index.
	SystemInfo3(context.Context, *QueryGetSystemInfo3Request) (*QueryGetSystemInfo3Response, error)
	// Queries a list of Vendor items.
	Vendor(context.Context, *QueryGetVendorRequest) (*QueryGetVendorResponse, error)
	VendorAll(context.Context, *QueryAllVendorRequest) (*QueryAllVendorResponse, error)
	// Queries a list of Purchaser items.
	Purchaser(context.Context, *QueryGetPurchaserRequest) (*QueryGetPurchaserResponse, error)
	PurchaserAll(context.Context, *QueryAllPurchaserRequest) (*QueryAllPurchaserResponse, error)
	// Queries a list of Transporter items.
	Transporter(context.Context, *QueryGetTransporterRequest) (*QueryGetTransporterResponse, error)
	TransporterAll(context.Context, *QueryAllTransporterRequest) (*QueryAllTransporterResponse, error)
	// Queries a SystemInfo4 by index.
	SystemInfo4(context.Context, *QueryGetSystemInfo4Request) (*QueryGetSystemInfo4Response, error)
	// Queries a list of Trade items.
	Trade(context.Context, *QueryGetTradeRequest) (*QueryGetTradeResponse, error)
	TradeAll(context.Context, *QueryAllTradeRequest) (*QueryAllTradeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) SystemInfo1(ctx context.Context, req *QueryGetSystemInfo1Request) (*QueryGetSystemInfo1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo1 not implemented")
}
func (*UnimplementedQueryServer) SystemInfo2(ctx context.Context, req *QueryGetSystemInfo2Request) (*QueryGetSystemInfo2Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo2 not implemented")
}
func (*UnimplementedQueryServer) SystemInfo3(ctx context.Context, req *QueryGetSystemInfo3Request) (*QueryGetSystemInfo3Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo3 not implemented")
}
func (*UnimplementedQueryServer) Vendor(ctx context.Context, req *QueryGetVendorRequest) (*QueryGetVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Vendor not implemented")
}
func (*UnimplementedQueryServer) VendorAll(ctx context.Context, req *QueryAllVendorRequest) (*QueryAllVendorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VendorAll not implemented")
}
func (*UnimplementedQueryServer) Purchaser(ctx context.Context, req *QueryGetPurchaserRequest) (*QueryGetPurchaserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Purchaser not implemented")
}
func (*UnimplementedQueryServer) PurchaserAll(ctx context.Context, req *QueryAllPurchaserRequest) (*QueryAllPurchaserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaserAll not implemented")
}
func (*UnimplementedQueryServer) Transporter(ctx context.Context, req *QueryGetTransporterRequest) (*QueryGetTransporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transporter not implemented")
}
func (*UnimplementedQueryServer) TransporterAll(ctx context.Context, req *QueryAllTransporterRequest) (*QueryAllTransporterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransporterAll not implemented")
}
func (*UnimplementedQueryServer) SystemInfo4(ctx context.Context, req *QueryGetSystemInfo4Request) (*QueryGetSystemInfo4Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SystemInfo4 not implemented")
}
func (*UnimplementedQueryServer) Trade(ctx context.Context, req *QueryGetTradeRequest) (*QueryGetTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Trade not implemented")
}
func (*UnimplementedQueryServer) TradeAll(ctx context.Context, req *QueryAllTradeRequest) (*QueryAllTradeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TradeAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemInfo1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemInfo1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemInfo1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/SystemInfo1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemInfo1(ctx, req.(*QueryGetSystemInfo1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemInfo2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemInfo2Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemInfo2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/SystemInfo2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemInfo2(ctx, req.(*QueryGetSystemInfo2Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemInfo3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemInfo3Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemInfo3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/SystemInfo3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemInfo3(ctx, req.(*QueryGetSystemInfo3Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Vendor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Vendor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/Vendor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Vendor(ctx, req.(*QueryGetVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VendorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllVendorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VendorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/VendorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VendorAll(ctx, req.(*QueryAllVendorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Purchaser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetPurchaserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Purchaser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/Purchaser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Purchaser(ctx, req.(*QueryGetPurchaserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PurchaserAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPurchaserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PurchaserAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/PurchaserAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PurchaserAll(ctx, req.(*QueryAllPurchaserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Transporter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTransporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Transporter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/Transporter",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Transporter(ctx, req.(*QueryGetTransporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TransporterAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTransporterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TransporterAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/TransporterAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TransporterAll(ctx, req.(*QueryAllTransporterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SystemInfo4_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSystemInfo4Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SystemInfo4(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/SystemInfo4",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SystemInfo4(ctx, req.(*QueryGetSystemInfo4Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/Trade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Trade(ctx, req.(*QueryGetTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_TradeAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllTradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TradeAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/logisticsbeta.logisticsbeta.Query/TradeAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TradeAll(ctx, req.(*QueryAllTradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "logisticsbeta.logisticsbeta.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "SystemInfo1",
			Handler:    _Query_SystemInfo1_Handler,
		},
		{
			MethodName: "SystemInfo2",
			Handler:    _Query_SystemInfo2_Handler,
		},
		{
			MethodName: "SystemInfo3",
			Handler:    _Query_SystemInfo3_Handler,
		},
		{
			MethodName: "Vendor",
			Handler:    _Query_Vendor_Handler,
		},
		{
			MethodName: "VendorAll",
			Handler:    _Query_VendorAll_Handler,
		},
		{
			MethodName: "Purchaser",
			Handler:    _Query_Purchaser_Handler,
		},
		{
			MethodName: "PurchaserAll",
			Handler:    _Query_PurchaserAll_Handler,
		},
		{
			MethodName: "Transporter",
			Handler:    _Query_Transporter_Handler,
		},
		{
			MethodName: "TransporterAll",
			Handler:    _Query_TransporterAll_Handler,
		},
		{
			MethodName: "SystemInfo4",
			Handler:    _Query_SystemInfo4_Handler,
		},
		{
			MethodName: "Trade",
			Handler:    _Query_Trade_Handler,
		},
		{
			MethodName: "TradeAll",
			Handler:    _Query_TradeAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "logisticsbeta/logisticsbeta/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo1Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo1Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo1Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo1Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo1Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo1Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SystemInfo1.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo2Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo2Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo2Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo2Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo2Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo2Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SystemInfo2.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo3Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo3Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo3Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo3Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo3Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo3Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SystemInfo3.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetVendorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVendorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVendorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Vendorid) > 0 {
		i -= len(m.Vendorid)
		copy(dAtA[i:], m.Vendorid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Vendorid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetVendorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetVendorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetVendorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Vendor.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllVendorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVendorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVendorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllVendorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllVendorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllVendorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Vendor) > 0 {
		for iNdEx := len(m.Vendor) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Vendor[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPurchaserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPurchaserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPurchaserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Purchaserid) > 0 {
		i -= len(m.Purchaserid)
		copy(dAtA[i:], m.Purchaserid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Purchaserid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetPurchaserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetPurchaserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetPurchaserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Purchaser.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaserRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaserRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaserRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPurchaserResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPurchaserResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPurchaserResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Purchaser) > 0 {
		for iNdEx := len(m.Purchaser) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Purchaser[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Transporterid) > 0 {
		i -= len(m.Transporterid)
		copy(dAtA[i:], m.Transporterid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Transporterid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTransporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTransporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTransporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Transporter.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTransporterRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTransporterRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTransporterRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTransporterResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTransporterResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTransporterResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transporter) > 0 {
		for iNdEx := len(m.Transporter) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Transporter[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo4Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo4Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo4Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryGetSystemInfo4Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSystemInfo4Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSystemInfo4Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.SystemInfo4.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Tradeid) > 0 {
		i -= len(m.Tradeid)
		copy(dAtA[i:], m.Tradeid)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Tradeid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Trade.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllTradeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllTradeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllTradeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllTradeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Trade) > 0 {
		for iNdEx := len(m.Trade) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Trade[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSystemInfo1Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSystemInfo1Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SystemInfo1.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSystemInfo2Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSystemInfo2Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SystemInfo2.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSystemInfo3Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSystemInfo3Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SystemInfo3.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetVendorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Vendorid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetVendorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Vendor.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllVendorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllVendorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Vendor) > 0 {
		for _, e := range m.Vendor {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPurchaserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Purchaserid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetPurchaserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Purchaser.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllPurchaserRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllPurchaserResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Purchaser) > 0 {
		for _, e := range m.Purchaser {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTransporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transporterid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTransporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Transporter.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTransporterRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTransporterResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Transporter) > 0 {
		for _, e := range m.Transporter {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSystemInfo4Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryGetSystemInfo4Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.SystemInfo4.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Tradeid)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Trade.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllTradeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllTradeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Trade) > 0 {
		for _, e := range m.Trade {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo1Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo1Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo1Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo1Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo1Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo1Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SystemInfo1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo2Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo2Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo2Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo2Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo2Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo2Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SystemInfo2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo3Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo3Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo3Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo3Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo3Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo3Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SystemInfo3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVendorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVendorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVendorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendorid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendorid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetVendorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetVendorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetVendorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Vendor.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVendorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVendorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVendorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllVendorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllVendorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllVendorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vendor", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Vendor = append(m.Vendor, Vendor{})
			if err := m.Vendor[len(m.Vendor)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPurchaserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPurchaserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPurchaserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaserid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaserid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetPurchaserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetPurchaserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetPurchaserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Purchaser.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaserRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaserRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaserRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPurchaserResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPurchaserResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPurchaserResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Purchaser", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Purchaser = append(m.Purchaser, Purchaser{})
			if err := m.Purchaser[len(m.Purchaser)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transporterid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transporterid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTransporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTransporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTransporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transporter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Transporter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTransporterRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTransporterRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTransporterRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTransporterResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTransporterResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTransporterResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transporter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transporter = append(m.Transporter, Transporter{})
			if err := m.Transporter[len(m.Transporter)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo4Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo4Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo4Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSystemInfo4Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSystemInfo4Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSystemInfo4Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SystemInfo4", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.SystemInfo4.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tradeid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tradeid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Trade.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllTradeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllTradeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllTradeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Trade", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Trade = append(m.Trade, Trade{})
			if err := m.Trade[len(m.Trade)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
