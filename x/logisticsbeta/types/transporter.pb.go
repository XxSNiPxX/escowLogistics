// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: logisticsbeta/logisticsbeta/transporter.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Transporter struct {
	Transporterid string `protobuf:"bytes,1,opt,name=transporterid,proto3" json:"transporterid,omitempty"`
	Active        string `protobuf:"bytes,2,opt,name=active,proto3" json:"active,omitempty"`
	WalletId      string `protobuf:"bytes,3,opt,name=walletId,proto3" json:"walletId,omitempty"`
	OffchainId    string `protobuf:"bytes,4,opt,name=offchainId,proto3" json:"offchainId,omitempty"`
	Escrowed      uint64 `protobuf:"varint,5,opt,name=escrowed,proto3" json:"escrowed,omitempty"`
}

func (m *Transporter) Reset()         { *m = Transporter{} }
func (m *Transporter) String() string { return proto.CompactTextString(m) }
func (*Transporter) ProtoMessage()    {}
func (*Transporter) Descriptor() ([]byte, []int) {
	return fileDescriptor_556abf0ec147fef7, []int{0}
}
func (m *Transporter) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Transporter) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Transporter.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Transporter) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Transporter.Merge(m, src)
}
func (m *Transporter) XXX_Size() int {
	return m.Size()
}
func (m *Transporter) XXX_DiscardUnknown() {
	xxx_messageInfo_Transporter.DiscardUnknown(m)
}

var xxx_messageInfo_Transporter proto.InternalMessageInfo

func (m *Transporter) GetTransporterid() string {
	if m != nil {
		return m.Transporterid
	}
	return ""
}

func (m *Transporter) GetActive() string {
	if m != nil {
		return m.Active
	}
	return ""
}

func (m *Transporter) GetWalletId() string {
	if m != nil {
		return m.WalletId
	}
	return ""
}

func (m *Transporter) GetOffchainId() string {
	if m != nil {
		return m.OffchainId
	}
	return ""
}

func (m *Transporter) GetEscrowed() uint64 {
	if m != nil {
		return m.Escrowed
	}
	return 0
}

func init() {
	proto.RegisterType((*Transporter)(nil), "logisticsbeta.logisticsbeta.Transporter")
}

func init() {
	proto.RegisterFile("logisticsbeta/logisticsbeta/transporter.proto", fileDescriptor_556abf0ec147fef7)
}

var fileDescriptor_556abf0ec147fef7 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xd2, 0xcd, 0xc9, 0x4f, 0xcf,
	0x2c, 0x2e, 0xc9, 0x4c, 0x2e, 0x4e, 0x4a, 0x2d, 0x49, 0xd4, 0x47, 0xe5, 0x95, 0x14, 0x25, 0xe6,
	0x15, 0x17, 0xe4, 0x17, 0x95, 0xa4, 0x16, 0xe9, 0x15, 0x14, 0xe5, 0x97, 0xe4, 0x0b, 0x49, 0xa3,
	0x28, 0xd0, 0x43, 0xe1, 0x29, 0x2d, 0x66, 0xe4, 0xe2, 0x0e, 0x41, 0x68, 0x11, 0x52, 0xe1, 0xe2,
	0x45, 0x32, 0x21, 0x33, 0x45, 0x82, 0x51, 0x81, 0x51, 0x83, 0x33, 0x08, 0x55, 0x50, 0x48, 0x8c,
	0x8b, 0x2d, 0x31, 0xb9, 0x24, 0xb3, 0x2c, 0x55, 0x82, 0x09, 0x2c, 0x0d, 0xe5, 0x09, 0x49, 0x71,
	0x71, 0x94, 0x27, 0xe6, 0xe4, 0xa4, 0x96, 0x78, 0xa6, 0x48, 0x30, 0x83, 0x65, 0xe0, 0x7c, 0x21,
	0x39, 0x2e, 0xae, 0xfc, 0xb4, 0xb4, 0xe4, 0x8c, 0xc4, 0xcc, 0x3c, 0xcf, 0x14, 0x09, 0x16, 0xb0,
	0x2c, 0x92, 0x08, 0x48, 0x6f, 0x6a, 0x71, 0x72, 0x51, 0x7e, 0x79, 0x6a, 0x8a, 0x04, 0xab, 0x02,
	0xa3, 0x06, 0x4b, 0x10, 0x9c, 0xef, 0x14, 0x78, 0xe2, 0x91, 0x1c, 0xe3, 0x85, 0x47, 0x72, 0x8c,
	0x0f, 0x1e, 0xc9, 0x31, 0x4e, 0x78, 0x2c, 0xc7, 0x70, 0xe1, 0xb1, 0x1c, 0xc3, 0x8d, 0xc7, 0x72,
	0x0c, 0x51, 0xe6, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9, 0xfa, 0x11, 0x15,
	0xc1, 0x7e, 0x99, 0x01, 0x15, 0x11, 0x88, 0x10, 0x71, 0x02, 0x85, 0x48, 0x05, 0x7a, 0x08, 0x55,
	0x16, 0xa4, 0x16, 0x27, 0xb1, 0x81, 0x03, 0xc7, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x6c, 0xe3,
	0x6f, 0x8b, 0x4d, 0x01, 0x00, 0x00,
}

func (m *Transporter) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Transporter) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Transporter) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Escrowed != 0 {
		i = encodeVarintTransporter(dAtA, i, uint64(m.Escrowed))
		i--
		dAtA[i] = 0x28
	}
	if len(m.OffchainId) > 0 {
		i -= len(m.OffchainId)
		copy(dAtA[i:], m.OffchainId)
		i = encodeVarintTransporter(dAtA, i, uint64(len(m.OffchainId)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.WalletId) > 0 {
		i -= len(m.WalletId)
		copy(dAtA[i:], m.WalletId)
		i = encodeVarintTransporter(dAtA, i, uint64(len(m.WalletId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Active) > 0 {
		i -= len(m.Active)
		copy(dAtA[i:], m.Active)
		i = encodeVarintTransporter(dAtA, i, uint64(len(m.Active)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Transporterid) > 0 {
		i -= len(m.Transporterid)
		copy(dAtA[i:], m.Transporterid)
		i = encodeVarintTransporter(dAtA, i, uint64(len(m.Transporterid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTransporter(dAtA []byte, offset int, v uint64) int {
	offset -= sovTransporter(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Transporter) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Transporterid)
	if l > 0 {
		n += 1 + l + sovTransporter(uint64(l))
	}
	l = len(m.Active)
	if l > 0 {
		n += 1 + l + sovTransporter(uint64(l))
	}
	l = len(m.WalletId)
	if l > 0 {
		n += 1 + l + sovTransporter(uint64(l))
	}
	l = len(m.OffchainId)
	if l > 0 {
		n += 1 + l + sovTransporter(uint64(l))
	}
	if m.Escrowed != 0 {
		n += 1 + sovTransporter(uint64(m.Escrowed))
	}
	return n
}

func sovTransporter(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTransporter(x uint64) (n int) {
	return sovTransporter(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Transporter) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTransporter
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Transporter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Transporter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Transporterid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Transporterid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Active = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WalletId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WalletId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OffchainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTransporter
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTransporter
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OffchainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Escrowed", wireType)
			}
			m.Escrowed = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Escrowed |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTransporter(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTransporter
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTransporter(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTransporter
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTransporter
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTransporter
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTransporter
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTransporter
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTransporter        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTransporter          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTransporter = fmt.Errorf("proto: unexpected end of group")
)
