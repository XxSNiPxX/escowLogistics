// Code generated by protoc-gen-go-pulsar. DO NOT EDIT.
package logisticsbeta

import (
	fmt "fmt"
	runtime "github.com/cosmos/cosmos-proto/runtime"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoiface "google.golang.org/protobuf/runtime/protoiface"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	io "io"
	reflect "reflect"
	sync "sync"
)

var (
	md_Trade                                 protoreflect.MessageDescriptor
	fd_Trade_tradeid                         protoreflect.FieldDescriptor
	fd_Trade_tradeState                      protoreflect.FieldDescriptor
	fd_Trade_purchaserId                     protoreflect.FieldDescriptor
	fd_Trade_vendorId                        protoreflect.FieldDescriptor
	fd_Trade_transportId                     protoreflect.FieldDescriptor
	fd_Trade_commodity                       protoreflect.FieldDescriptor
	fd_Trade_purchaserLocation               protoreflect.FieldDescriptor
	fd_Trade_vendorLocation                  protoreflect.FieldDescriptor
	fd_Trade_commodityPrice                  protoreflect.FieldDescriptor
	fd_Trade_transportPrice                  protoreflect.FieldDescriptor
	fd_Trade_vendorTradePending              protoreflect.FieldDescriptor
	fd_Trade_vendorTradeAccepted             protoreflect.FieldDescriptor
	fd_Trade_vendorTradeRejected             protoreflect.FieldDescriptor
	fd_Trade_vendorCommodityDispatched       protoreflect.FieldDescriptor
	fd_Trade_transporterTradePending         protoreflect.FieldDescriptor
	fd_Trade_transporterTradeAccepted        protoreflect.FieldDescriptor
	fd_Trade_transporterTradeRejected        protoreflect.FieldDescriptor
	fd_Trade_transporterVendorReached        protoreflect.FieldDescriptor
	fd_Trade_transporterCommodityCollected   protoreflect.FieldDescriptor
	fd_Trade_transporterPurchaserReached     protoreflect.FieldDescriptor
	fd_Trade_transporterCommodityDistributed protoreflect.FieldDescriptor
	fd_Trade_deadline                        protoreflect.FieldDescriptor
)

func init() {
	file_logisticsbeta_logisticsbeta_trade_proto_init()
	md_Trade = File_logisticsbeta_logisticsbeta_trade_proto.Messages().ByName("Trade")
	fd_Trade_tradeid = md_Trade.Fields().ByName("tradeid")
	fd_Trade_tradeState = md_Trade.Fields().ByName("tradeState")
	fd_Trade_purchaserId = md_Trade.Fields().ByName("purchaserId")
	fd_Trade_vendorId = md_Trade.Fields().ByName("vendorId")
	fd_Trade_transportId = md_Trade.Fields().ByName("transportId")
	fd_Trade_commodity = md_Trade.Fields().ByName("commodity")
	fd_Trade_purchaserLocation = md_Trade.Fields().ByName("purchaserLocation")
	fd_Trade_vendorLocation = md_Trade.Fields().ByName("vendorLocation")
	fd_Trade_commodityPrice = md_Trade.Fields().ByName("commodityPrice")
	fd_Trade_transportPrice = md_Trade.Fields().ByName("transportPrice")
	fd_Trade_vendorTradePending = md_Trade.Fields().ByName("vendorTradePending")
	fd_Trade_vendorTradeAccepted = md_Trade.Fields().ByName("vendorTradeAccepted")
	fd_Trade_vendorTradeRejected = md_Trade.Fields().ByName("vendorTradeRejected")
	fd_Trade_vendorCommodityDispatched = md_Trade.Fields().ByName("vendorCommodityDispatched")
	fd_Trade_transporterTradePending = md_Trade.Fields().ByName("transporterTradePending")
	fd_Trade_transporterTradeAccepted = md_Trade.Fields().ByName("transporterTradeAccepted")
	fd_Trade_transporterTradeRejected = md_Trade.Fields().ByName("transporterTradeRejected")
	fd_Trade_transporterVendorReached = md_Trade.Fields().ByName("transporterVendorReached")
	fd_Trade_transporterCommodityCollected = md_Trade.Fields().ByName("transporterCommodityCollected")
	fd_Trade_transporterPurchaserReached = md_Trade.Fields().ByName("transporterPurchaserReached")
	fd_Trade_transporterCommodityDistributed = md_Trade.Fields().ByName("transporterCommodityDistributed")
	fd_Trade_deadline = md_Trade.Fields().ByName("deadline")
}

var _ protoreflect.Message = (*fastReflection_Trade)(nil)

type fastReflection_Trade Trade

func (x *Trade) ProtoReflect() protoreflect.Message {
	return (*fastReflection_Trade)(x)
}

func (x *Trade) slowProtoReflect() protoreflect.Message {
	mi := &file_logisticsbeta_logisticsbeta_trade_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

var _fastReflection_Trade_messageType fastReflection_Trade_messageType
var _ protoreflect.MessageType = fastReflection_Trade_messageType{}

type fastReflection_Trade_messageType struct{}

func (x fastReflection_Trade_messageType) Zero() protoreflect.Message {
	return (*fastReflection_Trade)(nil)
}
func (x fastReflection_Trade_messageType) New() protoreflect.Message {
	return new(fastReflection_Trade)
}
func (x fastReflection_Trade_messageType) Descriptor() protoreflect.MessageDescriptor {
	return md_Trade
}

// Descriptor returns message descriptor, which contains only the protobuf
// type information for the message.
func (x *fastReflection_Trade) Descriptor() protoreflect.MessageDescriptor {
	return md_Trade
}

// Type returns the message type, which encapsulates both Go and protobuf
// type information. If the Go type information is not needed,
// it is recommended that the message descriptor be used instead.
func (x *fastReflection_Trade) Type() protoreflect.MessageType {
	return _fastReflection_Trade_messageType
}

// New returns a newly allocated and mutable empty message.
func (x *fastReflection_Trade) New() protoreflect.Message {
	return new(fastReflection_Trade)
}

// Interface unwraps the message reflection interface and
// returns the underlying ProtoMessage interface.
func (x *fastReflection_Trade) Interface() protoreflect.ProtoMessage {
	return (*Trade)(x)
}

// Range iterates over every populated field in an undefined order,
// calling f for each field descriptor and value encountered.
// Range returns immediately if f returns false.
// While iterating, mutating operations may only be performed
// on the current field descriptor.
func (x *fastReflection_Trade) Range(f func(protoreflect.FieldDescriptor, protoreflect.Value) bool) {
	if x.Tradeid != "" {
		value := protoreflect.ValueOfString(x.Tradeid)
		if !f(fd_Trade_tradeid, value) {
			return
		}
	}
	if x.TradeState != "" {
		value := protoreflect.ValueOfString(x.TradeState)
		if !f(fd_Trade_tradeState, value) {
			return
		}
	}
	if x.PurchaserId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.PurchaserId)
		if !f(fd_Trade_purchaserId, value) {
			return
		}
	}
	if x.VendorId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.VendorId)
		if !f(fd_Trade_vendorId, value) {
			return
		}
	}
	if x.TransportId != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TransportId)
		if !f(fd_Trade_transportId, value) {
			return
		}
	}
	if x.Commodity != "" {
		value := protoreflect.ValueOfString(x.Commodity)
		if !f(fd_Trade_commodity, value) {
			return
		}
	}
	if x.PurchaserLocation != "" {
		value := protoreflect.ValueOfString(x.PurchaserLocation)
		if !f(fd_Trade_purchaserLocation, value) {
			return
		}
	}
	if x.VendorLocation != "" {
		value := protoreflect.ValueOfString(x.VendorLocation)
		if !f(fd_Trade_vendorLocation, value) {
			return
		}
	}
	if x.CommodityPrice != uint64(0) {
		value := protoreflect.ValueOfUint64(x.CommodityPrice)
		if !f(fd_Trade_commodityPrice, value) {
			return
		}
	}
	if x.TransportPrice != uint64(0) {
		value := protoreflect.ValueOfUint64(x.TransportPrice)
		if !f(fd_Trade_transportPrice, value) {
			return
		}
	}
	if x.VendorTradePending != false {
		value := protoreflect.ValueOfBool(x.VendorTradePending)
		if !f(fd_Trade_vendorTradePending, value) {
			return
		}
	}
	if x.VendorTradeAccepted != false {
		value := protoreflect.ValueOfBool(x.VendorTradeAccepted)
		if !f(fd_Trade_vendorTradeAccepted, value) {
			return
		}
	}
	if x.VendorTradeRejected != false {
		value := protoreflect.ValueOfBool(x.VendorTradeRejected)
		if !f(fd_Trade_vendorTradeRejected, value) {
			return
		}
	}
	if x.VendorCommodityDispatched != false {
		value := protoreflect.ValueOfBool(x.VendorCommodityDispatched)
		if !f(fd_Trade_vendorCommodityDispatched, value) {
			return
		}
	}
	if x.TransporterTradePending != false {
		value := protoreflect.ValueOfBool(x.TransporterTradePending)
		if !f(fd_Trade_transporterTradePending, value) {
			return
		}
	}
	if x.TransporterTradeAccepted != false {
		value := protoreflect.ValueOfBool(x.TransporterTradeAccepted)
		if !f(fd_Trade_transporterTradeAccepted, value) {
			return
		}
	}
	if x.TransporterTradeRejected != false {
		value := protoreflect.ValueOfBool(x.TransporterTradeRejected)
		if !f(fd_Trade_transporterTradeRejected, value) {
			return
		}
	}
	if x.TransporterVendorReached != false {
		value := protoreflect.ValueOfBool(x.TransporterVendorReached)
		if !f(fd_Trade_transporterVendorReached, value) {
			return
		}
	}
	if x.TransporterCommodityCollected != false {
		value := protoreflect.ValueOfBool(x.TransporterCommodityCollected)
		if !f(fd_Trade_transporterCommodityCollected, value) {
			return
		}
	}
	if x.TransporterPurchaserReached != false {
		value := protoreflect.ValueOfBool(x.TransporterPurchaserReached)
		if !f(fd_Trade_transporterPurchaserReached, value) {
			return
		}
	}
	if x.TransporterCommodityDistributed != false {
		value := protoreflect.ValueOfBool(x.TransporterCommodityDistributed)
		if !f(fd_Trade_transporterCommodityDistributed, value) {
			return
		}
	}
	if x.Deadline != "" {
		value := protoreflect.ValueOfString(x.Deadline)
		if !f(fd_Trade_deadline, value) {
			return
		}
	}
}

// Has reports whether a field is populated.
//
// Some fields have the property of nullability where it is possible to
// distinguish between the default value of a field and whether the field
// was explicitly populated with the default value. Singular message fields,
// member fields of a oneof, and proto2 scalar fields are nullable. Such
// fields are populated only if explicitly set.
//
// In other cases (aside from the nullable cases above),
// a proto3 scalar field is populated if it contains a non-zero value, and
// a repeated field is populated if it is non-empty.
func (x *fastReflection_Trade) Has(fd protoreflect.FieldDescriptor) bool {
	switch fd.FullName() {
	case "logisticsbeta.logisticsbeta.Trade.tradeid":
		return x.Tradeid != ""
	case "logisticsbeta.logisticsbeta.Trade.tradeState":
		return x.TradeState != ""
	case "logisticsbeta.logisticsbeta.Trade.purchaserId":
		return x.PurchaserId != uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.vendorId":
		return x.VendorId != uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.transportId":
		return x.TransportId != uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.commodity":
		return x.Commodity != ""
	case "logisticsbeta.logisticsbeta.Trade.purchaserLocation":
		return x.PurchaserLocation != ""
	case "logisticsbeta.logisticsbeta.Trade.vendorLocation":
		return x.VendorLocation != ""
	case "logisticsbeta.logisticsbeta.Trade.commodityPrice":
		return x.CommodityPrice != uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.transportPrice":
		return x.TransportPrice != uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradePending":
		return x.VendorTradePending != false
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeAccepted":
		return x.VendorTradeAccepted != false
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeRejected":
		return x.VendorTradeRejected != false
	case "logisticsbeta.logisticsbeta.Trade.vendorCommodityDispatched":
		return x.VendorCommodityDispatched != false
	case "logisticsbeta.logisticsbeta.Trade.transporterTradePending":
		return x.TransporterTradePending != false
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeAccepted":
		return x.TransporterTradeAccepted != false
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeRejected":
		return x.TransporterTradeRejected != false
	case "logisticsbeta.logisticsbeta.Trade.transporterVendorReached":
		return x.TransporterVendorReached != false
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityCollected":
		return x.TransporterCommodityCollected != false
	case "logisticsbeta.logisticsbeta.Trade.transporterPurchaserReached":
		return x.TransporterPurchaserReached != false
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityDistributed":
		return x.TransporterCommodityDistributed != false
	case "logisticsbeta.logisticsbeta.Trade.deadline":
		return x.Deadline != ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: logisticsbeta.logisticsbeta.Trade"))
		}
		panic(fmt.Errorf("message logisticsbeta.logisticsbeta.Trade does not contain field %s", fd.FullName()))
	}
}

// Clear clears the field such that a subsequent Has call reports false.
//
// Clearing an extension field clears both the extension type and value
// associated with the given field number.
//
// Clear is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trade) Clear(fd protoreflect.FieldDescriptor) {
	switch fd.FullName() {
	case "logisticsbeta.logisticsbeta.Trade.tradeid":
		x.Tradeid = ""
	case "logisticsbeta.logisticsbeta.Trade.tradeState":
		x.TradeState = ""
	case "logisticsbeta.logisticsbeta.Trade.purchaserId":
		x.PurchaserId = uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.vendorId":
		x.VendorId = uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.transportId":
		x.TransportId = uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.commodity":
		x.Commodity = ""
	case "logisticsbeta.logisticsbeta.Trade.purchaserLocation":
		x.PurchaserLocation = ""
	case "logisticsbeta.logisticsbeta.Trade.vendorLocation":
		x.VendorLocation = ""
	case "logisticsbeta.logisticsbeta.Trade.commodityPrice":
		x.CommodityPrice = uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.transportPrice":
		x.TransportPrice = uint64(0)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradePending":
		x.VendorTradePending = false
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeAccepted":
		x.VendorTradeAccepted = false
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeRejected":
		x.VendorTradeRejected = false
	case "logisticsbeta.logisticsbeta.Trade.vendorCommodityDispatched":
		x.VendorCommodityDispatched = false
	case "logisticsbeta.logisticsbeta.Trade.transporterTradePending":
		x.TransporterTradePending = false
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeAccepted":
		x.TransporterTradeAccepted = false
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeRejected":
		x.TransporterTradeRejected = false
	case "logisticsbeta.logisticsbeta.Trade.transporterVendorReached":
		x.TransporterVendorReached = false
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityCollected":
		x.TransporterCommodityCollected = false
	case "logisticsbeta.logisticsbeta.Trade.transporterPurchaserReached":
		x.TransporterPurchaserReached = false
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityDistributed":
		x.TransporterCommodityDistributed = false
	case "logisticsbeta.logisticsbeta.Trade.deadline":
		x.Deadline = ""
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: logisticsbeta.logisticsbeta.Trade"))
		}
		panic(fmt.Errorf("message logisticsbeta.logisticsbeta.Trade does not contain field %s", fd.FullName()))
	}
}

// Get retrieves the value for a field.
//
// For unpopulated scalars, it returns the default value, where
// the default value of a bytes scalar is guaranteed to be a copy.
// For unpopulated composite types, it returns an empty, read-only view
// of the value; to obtain a mutable reference, use Mutable.
func (x *fastReflection_Trade) Get(descriptor protoreflect.FieldDescriptor) protoreflect.Value {
	switch descriptor.FullName() {
	case "logisticsbeta.logisticsbeta.Trade.tradeid":
		value := x.Tradeid
		return protoreflect.ValueOfString(value)
	case "logisticsbeta.logisticsbeta.Trade.tradeState":
		value := x.TradeState
		return protoreflect.ValueOfString(value)
	case "logisticsbeta.logisticsbeta.Trade.purchaserId":
		value := x.PurchaserId
		return protoreflect.ValueOfUint64(value)
	case "logisticsbeta.logisticsbeta.Trade.vendorId":
		value := x.VendorId
		return protoreflect.ValueOfUint64(value)
	case "logisticsbeta.logisticsbeta.Trade.transportId":
		value := x.TransportId
		return protoreflect.ValueOfUint64(value)
	case "logisticsbeta.logisticsbeta.Trade.commodity":
		value := x.Commodity
		return protoreflect.ValueOfString(value)
	case "logisticsbeta.logisticsbeta.Trade.purchaserLocation":
		value := x.PurchaserLocation
		return protoreflect.ValueOfString(value)
	case "logisticsbeta.logisticsbeta.Trade.vendorLocation":
		value := x.VendorLocation
		return protoreflect.ValueOfString(value)
	case "logisticsbeta.logisticsbeta.Trade.commodityPrice":
		value := x.CommodityPrice
		return protoreflect.ValueOfUint64(value)
	case "logisticsbeta.logisticsbeta.Trade.transportPrice":
		value := x.TransportPrice
		return protoreflect.ValueOfUint64(value)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradePending":
		value := x.VendorTradePending
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeAccepted":
		value := x.VendorTradeAccepted
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeRejected":
		value := x.VendorTradeRejected
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.vendorCommodityDispatched":
		value := x.VendorCommodityDispatched
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterTradePending":
		value := x.TransporterTradePending
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeAccepted":
		value := x.TransporterTradeAccepted
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeRejected":
		value := x.TransporterTradeRejected
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterVendorReached":
		value := x.TransporterVendorReached
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityCollected":
		value := x.TransporterCommodityCollected
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterPurchaserReached":
		value := x.TransporterPurchaserReached
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityDistributed":
		value := x.TransporterCommodityDistributed
		return protoreflect.ValueOfBool(value)
	case "logisticsbeta.logisticsbeta.Trade.deadline":
		value := x.Deadline
		return protoreflect.ValueOfString(value)
	default:
		if descriptor.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: logisticsbeta.logisticsbeta.Trade"))
		}
		panic(fmt.Errorf("message logisticsbeta.logisticsbeta.Trade does not contain field %s", descriptor.FullName()))
	}
}

// Set stores the value for a field.
//
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType.
// When setting a composite type, it is unspecified whether the stored value
// aliases the source's memory in any way. If the composite value is an
// empty, read-only value, then it panics.
//
// Set is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trade) Set(fd protoreflect.FieldDescriptor, value protoreflect.Value) {
	switch fd.FullName() {
	case "logisticsbeta.logisticsbeta.Trade.tradeid":
		x.Tradeid = value.Interface().(string)
	case "logisticsbeta.logisticsbeta.Trade.tradeState":
		x.TradeState = value.Interface().(string)
	case "logisticsbeta.logisticsbeta.Trade.purchaserId":
		x.PurchaserId = value.Uint()
	case "logisticsbeta.logisticsbeta.Trade.vendorId":
		x.VendorId = value.Uint()
	case "logisticsbeta.logisticsbeta.Trade.transportId":
		x.TransportId = value.Uint()
	case "logisticsbeta.logisticsbeta.Trade.commodity":
		x.Commodity = value.Interface().(string)
	case "logisticsbeta.logisticsbeta.Trade.purchaserLocation":
		x.PurchaserLocation = value.Interface().(string)
	case "logisticsbeta.logisticsbeta.Trade.vendorLocation":
		x.VendorLocation = value.Interface().(string)
	case "logisticsbeta.logisticsbeta.Trade.commodityPrice":
		x.CommodityPrice = value.Uint()
	case "logisticsbeta.logisticsbeta.Trade.transportPrice":
		x.TransportPrice = value.Uint()
	case "logisticsbeta.logisticsbeta.Trade.vendorTradePending":
		x.VendorTradePending = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeAccepted":
		x.VendorTradeAccepted = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeRejected":
		x.VendorTradeRejected = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.vendorCommodityDispatched":
		x.VendorCommodityDispatched = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterTradePending":
		x.TransporterTradePending = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeAccepted":
		x.TransporterTradeAccepted = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeRejected":
		x.TransporterTradeRejected = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterVendorReached":
		x.TransporterVendorReached = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityCollected":
		x.TransporterCommodityCollected = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterPurchaserReached":
		x.TransporterPurchaserReached = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityDistributed":
		x.TransporterCommodityDistributed = value.Bool()
	case "logisticsbeta.logisticsbeta.Trade.deadline":
		x.Deadline = value.Interface().(string)
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: logisticsbeta.logisticsbeta.Trade"))
		}
		panic(fmt.Errorf("message logisticsbeta.logisticsbeta.Trade does not contain field %s", fd.FullName()))
	}
}

// Mutable returns a mutable reference to a composite type.
//
// If the field is unpopulated, it may allocate a composite value.
// For a field belonging to a oneof, it implicitly clears any other field
// that may be currently set within the same oneof.
// For extension fields, it implicitly stores the provided ExtensionType
// if not already stored.
// It panics if the field does not contain a composite type.
//
// Mutable is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trade) Mutable(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "logisticsbeta.logisticsbeta.Trade.tradeid":
		panic(fmt.Errorf("field tradeid of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.tradeState":
		panic(fmt.Errorf("field tradeState of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.purchaserId":
		panic(fmt.Errorf("field purchaserId of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.vendorId":
		panic(fmt.Errorf("field vendorId of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transportId":
		panic(fmt.Errorf("field transportId of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.commodity":
		panic(fmt.Errorf("field commodity of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.purchaserLocation":
		panic(fmt.Errorf("field purchaserLocation of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.vendorLocation":
		panic(fmt.Errorf("field vendorLocation of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.commodityPrice":
		panic(fmt.Errorf("field commodityPrice of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transportPrice":
		panic(fmt.Errorf("field transportPrice of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.vendorTradePending":
		panic(fmt.Errorf("field vendorTradePending of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeAccepted":
		panic(fmt.Errorf("field vendorTradeAccepted of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeRejected":
		panic(fmt.Errorf("field vendorTradeRejected of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.vendorCommodityDispatched":
		panic(fmt.Errorf("field vendorCommodityDispatched of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterTradePending":
		panic(fmt.Errorf("field transporterTradePending of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeAccepted":
		panic(fmt.Errorf("field transporterTradeAccepted of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeRejected":
		panic(fmt.Errorf("field transporterTradeRejected of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterVendorReached":
		panic(fmt.Errorf("field transporterVendorReached of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityCollected":
		panic(fmt.Errorf("field transporterCommodityCollected of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterPurchaserReached":
		panic(fmt.Errorf("field transporterPurchaserReached of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityDistributed":
		panic(fmt.Errorf("field transporterCommodityDistributed of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	case "logisticsbeta.logisticsbeta.Trade.deadline":
		panic(fmt.Errorf("field deadline of message logisticsbeta.logisticsbeta.Trade is not mutable"))
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: logisticsbeta.logisticsbeta.Trade"))
		}
		panic(fmt.Errorf("message logisticsbeta.logisticsbeta.Trade does not contain field %s", fd.FullName()))
	}
}

// NewField returns a new value that is assignable to the field
// for the given descriptor. For scalars, this returns the default value.
// For lists, maps, and messages, this returns a new, empty, mutable value.
func (x *fastReflection_Trade) NewField(fd protoreflect.FieldDescriptor) protoreflect.Value {
	switch fd.FullName() {
	case "logisticsbeta.logisticsbeta.Trade.tradeid":
		return protoreflect.ValueOfString("")
	case "logisticsbeta.logisticsbeta.Trade.tradeState":
		return protoreflect.ValueOfString("")
	case "logisticsbeta.logisticsbeta.Trade.purchaserId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "logisticsbeta.logisticsbeta.Trade.vendorId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "logisticsbeta.logisticsbeta.Trade.transportId":
		return protoreflect.ValueOfUint64(uint64(0))
	case "logisticsbeta.logisticsbeta.Trade.commodity":
		return protoreflect.ValueOfString("")
	case "logisticsbeta.logisticsbeta.Trade.purchaserLocation":
		return protoreflect.ValueOfString("")
	case "logisticsbeta.logisticsbeta.Trade.vendorLocation":
		return protoreflect.ValueOfString("")
	case "logisticsbeta.logisticsbeta.Trade.commodityPrice":
		return protoreflect.ValueOfUint64(uint64(0))
	case "logisticsbeta.logisticsbeta.Trade.transportPrice":
		return protoreflect.ValueOfUint64(uint64(0))
	case "logisticsbeta.logisticsbeta.Trade.vendorTradePending":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeAccepted":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.vendorTradeRejected":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.vendorCommodityDispatched":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterTradePending":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeAccepted":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterTradeRejected":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterVendorReached":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityCollected":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterPurchaserReached":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.transporterCommodityDistributed":
		return protoreflect.ValueOfBool(false)
	case "logisticsbeta.logisticsbeta.Trade.deadline":
		return protoreflect.ValueOfString("")
	default:
		if fd.IsExtension() {
			panic(fmt.Errorf("proto3 declared messages do not support extensions: logisticsbeta.logisticsbeta.Trade"))
		}
		panic(fmt.Errorf("message logisticsbeta.logisticsbeta.Trade does not contain field %s", fd.FullName()))
	}
}

// WhichOneof reports which field within the oneof is populated,
// returning nil if none are populated.
// It panics if the oneof descriptor does not belong to this message.
func (x *fastReflection_Trade) WhichOneof(d protoreflect.OneofDescriptor) protoreflect.FieldDescriptor {
	switch d.FullName() {
	default:
		panic(fmt.Errorf("%s is not a oneof field in logisticsbeta.logisticsbeta.Trade", d.FullName()))
	}
	panic("unreachable")
}

// GetUnknown retrieves the entire list of unknown fields.
// The caller may only mutate the contents of the RawFields
// if the mutated bytes are stored back into the message with SetUnknown.
func (x *fastReflection_Trade) GetUnknown() protoreflect.RawFields {
	return x.unknownFields
}

// SetUnknown stores an entire list of unknown fields.
// The raw fields must be syntactically valid according to the wire format.
// An implementation may panic if this is not the case.
// Once stored, the caller must not mutate the content of the RawFields.
// An empty RawFields may be passed to clear the fields.
//
// SetUnknown is a mutating operation and unsafe for concurrent use.
func (x *fastReflection_Trade) SetUnknown(fields protoreflect.RawFields) {
	x.unknownFields = fields
}

// IsValid reports whether the message is valid.
//
// An invalid message is an empty, read-only value.
//
// An invalid message often corresponds to a nil pointer of the concrete
// message type, but the details are implementation dependent.
// Validity is not part of the protobuf data model, and may not
// be preserved in marshaling or other operations.
func (x *fastReflection_Trade) IsValid() bool {
	return x != nil
}

// ProtoMethods returns optional fastReflectionFeature-path implementations of various operations.
// This method may return nil.
//
// The returned methods type is identical to
// "google.golang.org/protobuf/runtime/protoiface".Methods.
// Consult the protoiface package documentation for details.
func (x *fastReflection_Trade) ProtoMethods() *protoiface.Methods {
	size := func(input protoiface.SizeInput) protoiface.SizeOutput {
		x := input.Message.Interface().(*Trade)
		if x == nil {
			return protoiface.SizeOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Size:              0,
			}
		}
		options := runtime.SizeInputToOptions(input)
		_ = options
		var n int
		var l int
		_ = l
		l = len(x.Tradeid)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.TradeState)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.PurchaserId != 0 {
			n += 1 + runtime.Sov(uint64(x.PurchaserId))
		}
		if x.VendorId != 0 {
			n += 1 + runtime.Sov(uint64(x.VendorId))
		}
		if x.TransportId != 0 {
			n += 1 + runtime.Sov(uint64(x.TransportId))
		}
		l = len(x.Commodity)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.PurchaserLocation)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		l = len(x.VendorLocation)
		if l > 0 {
			n += 1 + l + runtime.Sov(uint64(l))
		}
		if x.CommodityPrice != 0 {
			n += 1 + runtime.Sov(uint64(x.CommodityPrice))
		}
		if x.TransportPrice != 0 {
			n += 1 + runtime.Sov(uint64(x.TransportPrice))
		}
		if x.VendorTradePending {
			n += 2
		}
		if x.VendorTradeAccepted {
			n += 2
		}
		if x.VendorTradeRejected {
			n += 2
		}
		if x.VendorCommodityDispatched {
			n += 2
		}
		if x.TransporterTradePending {
			n += 2
		}
		if x.TransporterTradeAccepted {
			n += 3
		}
		if x.TransporterTradeRejected {
			n += 3
		}
		if x.TransporterVendorReached {
			n += 3
		}
		if x.TransporterCommodityCollected {
			n += 3
		}
		if x.TransporterPurchaserReached {
			n += 3
		}
		if x.TransporterCommodityDistributed {
			n += 3
		}
		l = len(x.Deadline)
		if l > 0 {
			n += 2 + l + runtime.Sov(uint64(l))
		}
		if x.unknownFields != nil {
			n += len(x.unknownFields)
		}
		return protoiface.SizeOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Size:              n,
		}
	}

	marshal := func(input protoiface.MarshalInput) (protoiface.MarshalOutput, error) {
		x := input.Message.Interface().(*Trade)
		if x == nil {
			return protoiface.MarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Buf:               input.Buf,
			}, nil
		}
		options := runtime.MarshalInputToOptions(input)
		_ = options
		size := options.Size(x)
		dAtA := make([]byte, size)
		i := len(dAtA)
		_ = i
		var l int
		_ = l
		if x.unknownFields != nil {
			i -= len(x.unknownFields)
			copy(dAtA[i:], x.unknownFields)
		}
		if len(x.Deadline) > 0 {
			i -= len(x.Deadline)
			copy(dAtA[i:], x.Deadline)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Deadline)))
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xb2
		}
		if x.TransporterCommodityDistributed {
			i--
			if x.TransporterCommodityDistributed {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa8
		}
		if x.TransporterPurchaserReached {
			i--
			if x.TransporterPurchaserReached {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0xa0
		}
		if x.TransporterCommodityCollected {
			i--
			if x.TransporterCommodityCollected {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x98
		}
		if x.TransporterVendorReached {
			i--
			if x.TransporterVendorReached {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x90
		}
		if x.TransporterTradeRejected {
			i--
			if x.TransporterTradeRejected {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x88
		}
		if x.TransporterTradeAccepted {
			i--
			if x.TransporterTradeAccepted {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x80
		}
		if x.TransporterTradePending {
			i--
			if x.TransporterTradePending {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x78
		}
		if x.VendorCommodityDispatched {
			i--
			if x.VendorCommodityDispatched {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x70
		}
		if x.VendorTradeRejected {
			i--
			if x.VendorTradeRejected {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x68
		}
		if x.VendorTradeAccepted {
			i--
			if x.VendorTradeAccepted {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x60
		}
		if x.VendorTradePending {
			i--
			if x.VendorTradePending {
				dAtA[i] = 1
			} else {
				dAtA[i] = 0
			}
			i--
			dAtA[i] = 0x58
		}
		if x.TransportPrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TransportPrice))
			i--
			dAtA[i] = 0x50
		}
		if x.CommodityPrice != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.CommodityPrice))
			i--
			dAtA[i] = 0x48
		}
		if len(x.VendorLocation) > 0 {
			i -= len(x.VendorLocation)
			copy(dAtA[i:], x.VendorLocation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.VendorLocation)))
			i--
			dAtA[i] = 0x42
		}
		if len(x.PurchaserLocation) > 0 {
			i -= len(x.PurchaserLocation)
			copy(dAtA[i:], x.PurchaserLocation)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.PurchaserLocation)))
			i--
			dAtA[i] = 0x3a
		}
		if len(x.Commodity) > 0 {
			i -= len(x.Commodity)
			copy(dAtA[i:], x.Commodity)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Commodity)))
			i--
			dAtA[i] = 0x32
		}
		if x.TransportId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.TransportId))
			i--
			dAtA[i] = 0x28
		}
		if x.VendorId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.VendorId))
			i--
			dAtA[i] = 0x20
		}
		if x.PurchaserId != 0 {
			i = runtime.EncodeVarint(dAtA, i, uint64(x.PurchaserId))
			i--
			dAtA[i] = 0x18
		}
		if len(x.TradeState) > 0 {
			i -= len(x.TradeState)
			copy(dAtA[i:], x.TradeState)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.TradeState)))
			i--
			dAtA[i] = 0x12
		}
		if len(x.Tradeid) > 0 {
			i -= len(x.Tradeid)
			copy(dAtA[i:], x.Tradeid)
			i = runtime.EncodeVarint(dAtA, i, uint64(len(x.Tradeid)))
			i--
			dAtA[i] = 0xa
		}
		if input.Buf != nil {
			input.Buf = append(input.Buf, dAtA...)
		} else {
			input.Buf = dAtA
		}
		return protoiface.MarshalOutput{
			NoUnkeyedLiterals: input.NoUnkeyedLiterals,
			Buf:               input.Buf,
		}, nil
	}
	unmarshal := func(input protoiface.UnmarshalInput) (protoiface.UnmarshalOutput, error) {
		x := input.Message.Interface().(*Trade)
		if x == nil {
			return protoiface.UnmarshalOutput{
				NoUnkeyedLiterals: input.NoUnkeyedLiterals,
				Flags:             input.Flags,
			}, nil
		}
		options := runtime.UnmarshalInputToOptions(input)
		_ = options
		dAtA := input.Buf
		l := len(dAtA)
		iNdEx := 0
		for iNdEx < l {
			preIndex := iNdEx
			var wire uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
				}
				if iNdEx >= l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				wire |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			fieldNum := int32(wire >> 3)
			wireType := int(wire & 0x7)
			if wireType == 4 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Trade: wiretype end group for non-group")
			}
			if fieldNum <= 0 {
				return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: Trade: illegal tag %d (wire type %d)", fieldNum, wire)
			}
			switch fieldNum {
			case 1:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Tradeid", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Tradeid = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 2:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TradeState", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.TradeState = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 3:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PurchaserId", wireType)
				}
				x.PurchaserId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.PurchaserId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 4:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VendorId", wireType)
				}
				x.VendorId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.VendorId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 5:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransportId", wireType)
				}
				x.TransportId = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TransportId |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 6:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Commodity", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Commodity = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 7:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field PurchaserLocation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.PurchaserLocation = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 8:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VendorLocation", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.VendorLocation = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			case 9:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field CommodityPrice", wireType)
				}
				x.CommodityPrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.CommodityPrice |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 10:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransportPrice", wireType)
				}
				x.TransportPrice = 0
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					x.TransportPrice |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
			case 11:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VendorTradePending", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.VendorTradePending = bool(v != 0)
			case 12:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VendorTradeAccepted", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.VendorTradeAccepted = bool(v != 0)
			case 13:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VendorTradeRejected", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.VendorTradeRejected = bool(v != 0)
			case 14:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field VendorCommodityDispatched", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.VendorCommodityDispatched = bool(v != 0)
			case 15:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterTradePending", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterTradePending = bool(v != 0)
			case 16:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterTradeAccepted", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterTradeAccepted = bool(v != 0)
			case 17:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterTradeRejected", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterTradeRejected = bool(v != 0)
			case 18:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterVendorReached", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterVendorReached = bool(v != 0)
			case 19:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterCommodityCollected", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterCommodityCollected = bool(v != 0)
			case 20:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterPurchaserReached", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterPurchaserReached = bool(v != 0)
			case 21:
				if wireType != 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field TransporterCommodityDistributed", wireType)
				}
				var v int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				x.TransporterCommodityDistributed = bool(v != 0)
			case 22:
				if wireType != 2 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
				}
				var stringLen uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrIntOverflow
					}
					if iNdEx >= l {
						return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					stringLen |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				intStringLen := int(stringLen)
				if intStringLen < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				postIndex := iNdEx + intStringLen
				if postIndex < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if postIndex > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				x.Deadline = string(dAtA[iNdEx:postIndex])
				iNdEx = postIndex
			default:
				iNdEx = preIndex
				skippy, err := runtime.Skip(dAtA[iNdEx:])
				if err != nil {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, err
				}
				if (skippy < 0) || (iNdEx+skippy) < 0 {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, runtime.ErrInvalidLength
				}
				if (iNdEx + skippy) > l {
					return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
				}
				if !options.DiscardUnknown {
					x.unknownFields = append(x.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
				}
				iNdEx += skippy
			}
		}

		if iNdEx > l {
			return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, io.ErrUnexpectedEOF
		}
		return protoiface.UnmarshalOutput{NoUnkeyedLiterals: input.NoUnkeyedLiterals, Flags: input.Flags}, nil
	}
	return &protoiface.Methods{
		NoUnkeyedLiterals: struct{}{},
		Flags:             protoiface.SupportMarshalDeterministic | protoiface.SupportUnmarshalDiscardUnknown,
		Size:              size,
		Marshal:           marshal,
		Unmarshal:         unmarshal,
		Merge:             nil,
		CheckInitialized:  nil,
	}
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.0
// 	protoc        (unknown)
// source: logisticsbeta/logisticsbeta/trade.proto

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Trade struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tradeid                         string `protobuf:"bytes,1,opt,name=tradeid,proto3" json:"tradeid,omitempty"`
	TradeState                      string `protobuf:"bytes,2,opt,name=tradeState,proto3" json:"tradeState,omitempty"`
	PurchaserId                     uint64 `protobuf:"varint,3,opt,name=purchaserId,proto3" json:"purchaserId,omitempty"`
	VendorId                        uint64 `protobuf:"varint,4,opt,name=vendorId,proto3" json:"vendorId,omitempty"`
	TransportId                     uint64 `protobuf:"varint,5,opt,name=transportId,proto3" json:"transportId,omitempty"`
	Commodity                       string `protobuf:"bytes,6,opt,name=commodity,proto3" json:"commodity,omitempty"`
	PurchaserLocation               string `protobuf:"bytes,7,opt,name=purchaserLocation,proto3" json:"purchaserLocation,omitempty"`
	VendorLocation                  string `protobuf:"bytes,8,opt,name=vendorLocation,proto3" json:"vendorLocation,omitempty"`
	CommodityPrice                  uint64 `protobuf:"varint,9,opt,name=commodityPrice,proto3" json:"commodityPrice,omitempty"`
	TransportPrice                  uint64 `protobuf:"varint,10,opt,name=transportPrice,proto3" json:"transportPrice,omitempty"`
	VendorTradePending              bool   `protobuf:"varint,11,opt,name=vendorTradePending,proto3" json:"vendorTradePending,omitempty"`
	VendorTradeAccepted             bool   `protobuf:"varint,12,opt,name=vendorTradeAccepted,proto3" json:"vendorTradeAccepted,omitempty"`
	VendorTradeRejected             bool   `protobuf:"varint,13,opt,name=vendorTradeRejected,proto3" json:"vendorTradeRejected,omitempty"`
	VendorCommodityDispatched       bool   `protobuf:"varint,14,opt,name=vendorCommodityDispatched,proto3" json:"vendorCommodityDispatched,omitempty"`
	TransporterTradePending         bool   `protobuf:"varint,15,opt,name=transporterTradePending,proto3" json:"transporterTradePending,omitempty"`
	TransporterTradeAccepted        bool   `protobuf:"varint,16,opt,name=transporterTradeAccepted,proto3" json:"transporterTradeAccepted,omitempty"`
	TransporterTradeRejected        bool   `protobuf:"varint,17,opt,name=transporterTradeRejected,proto3" json:"transporterTradeRejected,omitempty"`
	TransporterVendorReached        bool   `protobuf:"varint,18,opt,name=transporterVendorReached,proto3" json:"transporterVendorReached,omitempty"`
	TransporterCommodityCollected   bool   `protobuf:"varint,19,opt,name=transporterCommodityCollected,proto3" json:"transporterCommodityCollected,omitempty"`
	TransporterPurchaserReached     bool   `protobuf:"varint,20,opt,name=transporterPurchaserReached,proto3" json:"transporterPurchaserReached,omitempty"`
	TransporterCommodityDistributed bool   `protobuf:"varint,21,opt,name=transporterCommodityDistributed,proto3" json:"transporterCommodityDistributed,omitempty"`
	Deadline                        string `protobuf:"bytes,22,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *Trade) Reset() {
	*x = Trade{}
	if protoimpl.UnsafeEnabled {
		mi := &file_logisticsbeta_logisticsbeta_trade_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trade) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trade) ProtoMessage() {}

// Deprecated: Use Trade.ProtoReflect.Descriptor instead.
func (*Trade) Descriptor() ([]byte, []int) {
	return file_logisticsbeta_logisticsbeta_trade_proto_rawDescGZIP(), []int{0}
}

func (x *Trade) GetTradeid() string {
	if x != nil {
		return x.Tradeid
	}
	return ""
}

func (x *Trade) GetTradeState() string {
	if x != nil {
		return x.TradeState
	}
	return ""
}

func (x *Trade) GetPurchaserId() uint64 {
	if x != nil {
		return x.PurchaserId
	}
	return 0
}

func (x *Trade) GetVendorId() uint64 {
	if x != nil {
		return x.VendorId
	}
	return 0
}

func (x *Trade) GetTransportId() uint64 {
	if x != nil {
		return x.TransportId
	}
	return 0
}

func (x *Trade) GetCommodity() string {
	if x != nil {
		return x.Commodity
	}
	return ""
}

func (x *Trade) GetPurchaserLocation() string {
	if x != nil {
		return x.PurchaserLocation
	}
	return ""
}

func (x *Trade) GetVendorLocation() string {
	if x != nil {
		return x.VendorLocation
	}
	return ""
}

func (x *Trade) GetCommodityPrice() uint64 {
	if x != nil {
		return x.CommodityPrice
	}
	return 0
}

func (x *Trade) GetTransportPrice() uint64 {
	if x != nil {
		return x.TransportPrice
	}
	return 0
}

func (x *Trade) GetVendorTradePending() bool {
	if x != nil {
		return x.VendorTradePending
	}
	return false
}

func (x *Trade) GetVendorTradeAccepted() bool {
	if x != nil {
		return x.VendorTradeAccepted
	}
	return false
}

func (x *Trade) GetVendorTradeRejected() bool {
	if x != nil {
		return x.VendorTradeRejected
	}
	return false
}

func (x *Trade) GetVendorCommodityDispatched() bool {
	if x != nil {
		return x.VendorCommodityDispatched
	}
	return false
}

func (x *Trade) GetTransporterTradePending() bool {
	if x != nil {
		return x.TransporterTradePending
	}
	return false
}

func (x *Trade) GetTransporterTradeAccepted() bool {
	if x != nil {
		return x.TransporterTradeAccepted
	}
	return false
}

func (x *Trade) GetTransporterTradeRejected() bool {
	if x != nil {
		return x.TransporterTradeRejected
	}
	return false
}

func (x *Trade) GetTransporterVendorReached() bool {
	if x != nil {
		return x.TransporterVendorReached
	}
	return false
}

func (x *Trade) GetTransporterCommodityCollected() bool {
	if x != nil {
		return x.TransporterCommodityCollected
	}
	return false
}

func (x *Trade) GetTransporterPurchaserReached() bool {
	if x != nil {
		return x.TransporterPurchaserReached
	}
	return false
}

func (x *Trade) GetTransporterCommodityDistributed() bool {
	if x != nil {
		return x.TransporterCommodityDistributed
	}
	return false
}

func (x *Trade) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

var File_logisticsbeta_logisticsbeta_trade_proto protoreflect.FileDescriptor

var file_logisticsbeta_logisticsbeta_trade_proto_rawDesc = []byte{
	0x0a, 0x27, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x2f,
	0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x6c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x22, 0x93, 0x08, 0x0a, 0x05, 0x54, 0x72, 0x61, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x64, 0x65, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x75,
	0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0b, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x12, 0x2c, 0x0a, 0x11, 0x70, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x2e,
	0x0a, 0x12, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x6e,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12, 0x76, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x30,
	0x0a, 0x13, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63,
	0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76, 0x65, 0x6e,
	0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63, 0x63, 0x65, 0x70, 0x74, 0x65, 0x64,
	0x12, 0x30, 0x0a, 0x13, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x6a, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x76,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x19, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x76, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x70, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64,
	0x12, 0x38, 0x0a, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54,
	0x72, 0x61, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x17, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x50, 0x65, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x12, 0x3a, 0x0a, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x18, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65,
	0x72, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x44,
	0x0a, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d,
	0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72,
	0x74, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x52, 0x65, 0x61, 0x63,
	0x68, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x1b, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x50, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70,
	0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x1f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x6f, 0x64, 0x69, 0x74, 0x79, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x42, 0xe8, 0x01, 0x0a,
	0x1f, 0x63, 0x6f, 0x6d, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61,
	0x42, 0x0a, 0x54, 0x72, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2c,
	0x63, 0x6f, 0x73, 0x6d, 0x6f, 0x73, 0x73, 0x64, 0x6b, 0x2e, 0x69, 0x6f, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x2f, 0x6c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0xa2, 0x02, 0x03, 0x4c,
	0x4c, 0x58, 0xaa, 0x02, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65,
	0x74, 0x61, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61,
	0xca, 0x02, 0x1b, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61,
	0x5c, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0xe2, 0x02,
	0x27, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x5c, 0x4c,
	0x6f, 0x67, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x5c, 0x47, 0x50, 0x42,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x1c, 0x4c, 0x6f, 0x67, 0x69, 0x73,
	0x74, 0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x3a, 0x3a, 0x4c, 0x6f, 0x67, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x62, 0x65, 0x74, 0x61, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_logisticsbeta_logisticsbeta_trade_proto_rawDescOnce sync.Once
	file_logisticsbeta_logisticsbeta_trade_proto_rawDescData = file_logisticsbeta_logisticsbeta_trade_proto_rawDesc
)

func file_logisticsbeta_logisticsbeta_trade_proto_rawDescGZIP() []byte {
	file_logisticsbeta_logisticsbeta_trade_proto_rawDescOnce.Do(func() {
		file_logisticsbeta_logisticsbeta_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_logisticsbeta_logisticsbeta_trade_proto_rawDescData)
	})
	return file_logisticsbeta_logisticsbeta_trade_proto_rawDescData
}

var file_logisticsbeta_logisticsbeta_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_logisticsbeta_logisticsbeta_trade_proto_goTypes = []interface{}{
	(*Trade)(nil), // 0: logisticsbeta.logisticsbeta.Trade
}
var file_logisticsbeta_logisticsbeta_trade_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_logisticsbeta_logisticsbeta_trade_proto_init() }
func file_logisticsbeta_logisticsbeta_trade_proto_init() {
	if File_logisticsbeta_logisticsbeta_trade_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_logisticsbeta_logisticsbeta_trade_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trade); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_logisticsbeta_logisticsbeta_trade_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_logisticsbeta_logisticsbeta_trade_proto_goTypes,
		DependencyIndexes: file_logisticsbeta_logisticsbeta_trade_proto_depIdxs,
		MessageInfos:      file_logisticsbeta_logisticsbeta_trade_proto_msgTypes,
	}.Build()
	File_logisticsbeta_logisticsbeta_trade_proto = out.File
	file_logisticsbeta_logisticsbeta_trade_proto_rawDesc = nil
	file_logisticsbeta_logisticsbeta_trade_proto_goTypes = nil
	file_logisticsbeta_logisticsbeta_trade_proto_depIdxs = nil
}
